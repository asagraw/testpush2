<Activity mc:Ignorable="sap sap2010" x:Class="Azure_SelectRobotVM" xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:mva="clr-namespace:Microsoft.VisualBasic.Activities;assembly=System.Activities" xmlns:s="clr-namespace:System;assembly=mscorlib" xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation" xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation" xmlns:scg="clr-namespace:System.Collections.Generic;assembly=mscorlib" xmlns:ui="http://schemas.uipath.com/workflow/activities" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <x:Members>
    <x:Property sap2010:Annotation.AnnotationText="Available, Disconnected" Name="State" Type="InArgument(x:String)" />
    <x:Property Name="Token" Type="InArgument(x:String)" />
    <x:Property Name="TenantLogicalName" Type="InArgument(x:String)" />
    <x:Property Name="TenantService" Type="InArgument(x:String)" />
    <x:Property Name="Url" Type="InArgument(x:String)" />
    <x:Property sap2010:Annotation.AnnotationText="Default" Name="FolderId" Type="InArgument(x:String)" />
    <x:Property Name="SelectedVMsList" Type="OutArgument(scg:List(x:String))" />
    <x:Property Name="SpecificRobotsForJobs" Type="InArgument(scg:List(x:String))" />
    <x:Property sap2010:Annotation.AnnotationText="avoid reprocessing ofRobot VMs that were selected for allocation" Name="ProcessedVMs" Type="InArgument(scg:List(x:String))" />
    <x:Property Name="CountPendingJobs" Type="InArgument(x:Int32)" />
    <x:Property Name="CountQEventsStart" Type="InArgument(x:Int32)" />
    <x:Property Name="CountQEventsStop" Type="InArgument(x:Int32)" />
    <x:Property sap2010:Annotation.AnnotationText="can have duplicates for high density robots" Name="UnattendedRobotsMachines" Type="InArgument(scg:List(x:String))" />
    <x:Property Name="CountRobotMachinesHot" Type="InArgument(x:Int32)" />
    <x:Property Name="CountRobotMachinesCold" Type="InArgument(x:Int32)" />
    <x:Property Name="CountRobotMachinesVirtual" Type="InArgument(x:Int32)" />
    <x:Property Name="clientOrchestratorIsOnprem" Type="InArgument(x:Boolean)" />
    <x:Property Name="clientRobotStatusToggle" Type="InArgument(x:Boolean)" />
    <x:Property Name="clientTempEnvName" Type="InArgument(x:String)" />
    <x:Property Name="clientEnvironment" Type="InArgument(x:String)" />
  </x:Members>
  <mva:VisualBasic.Settings>
    <x:Null />
  </mva:VisualBasic.Settings>
  <sap:VirtualizedContainerService.HintSize>1279.2,3538.4</sap:VirtualizedContainerService.HintSize>
  <sap2010:WorkflowViewState.IdRef>Azure_SelectRobotVM_1</sap2010:WorkflowViewState.IdRef>
  <TextExpression.NamespacesForImplementation>
    <scg:List x:TypeArguments="x:String" Capacity="52">
      <x:String>System.Activities</x:String>
      <x:String>System.Activities.Statements</x:String>
      <x:String>System.Activities.Expressions</x:String>
      <x:String>System.Activities.Validation</x:String>
      <x:String>System.Activities.XamlIntegration</x:String>
      <x:String>Microsoft.VisualBasic</x:String>
      <x:String>Microsoft.VisualBasic.Activities</x:String>
      <x:String>System</x:String>
      <x:String>System.Collections</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Diagnostics</x:String>
      <x:String>System.Drawing</x:String>
      <x:String>System.IO</x:String>
      <x:String>System.Linq</x:String>
      <x:String>System.Net.Mail</x:String>
      <x:String>System.Xml</x:String>
      <x:String>System.Xml.Linq</x:String>
      <x:String>UiPath.Core</x:String>
      <x:String>UiPath.Core.Activities</x:String>
      <x:String>System.Windows.Markup</x:String>
      <x:String>System.Security</x:String>
      <x:String>UiPath.Azure.Models</x:String>
      <x:String>Newtonsoft.Json.Linq</x:String>
      <x:String>Newtonsoft.Json</x:String>
      <x:String>Microsoft.VisualBasic.CompilerServices</x:String>
      <x:String>System.Activities.DynamicUpdate</x:String>
      <x:String>UiPath.Web.Activities</x:String>
    </scg:List>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <scg:List x:TypeArguments="AssemblyReference" Capacity="44">
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>Microsoft.VisualBasic</AssemblyReference>
      <AssemblyReference>mscorlib</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System.Data.DataSetExtensions</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Drawing</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>PresentationFramework</AssemblyReference>
      <AssemblyReference>WindowsBase</AssemblyReference>
      <AssemblyReference>PresentationCore</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities</AssemblyReference>
      <AssemblyReference>UiPath.UiAutomation.Activities</AssemblyReference>
      <AssemblyReference>System.Security.SecureString</AssemblyReference>
      <AssemblyReference>UiPath.Azure</AssemblyReference>
      <AssemblyReference>Newtonsoft.Json</AssemblyReference>
      <AssemblyReference>System.ValueTuple</AssemblyReference>
      <AssemblyReference>System.ServiceModel</AssemblyReference>
      <AssemblyReference>System.ComponentModel.Composition</AssemblyReference>
      <AssemblyReference>UiPath.Mail</AssemblyReference>
      <AssemblyReference>UiPath.Excel</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities.Design</AssemblyReference>
      <AssemblyReference>UiPath.Web.Activities</AssemblyReference>
    </scg:List>
  </TextExpression.ReferencesForImplementation>
  <Sequence DisplayName="SelectRobotVM" sap:VirtualizedContainerService.HintSize="1289.6,3333.6" sap2010:WorkflowViewState.IdRef="Sequence_1">
    <Sequence.Variables>
      <Variable x:TypeArguments="x:String" Name="Response" />
      <Variable x:TypeArguments="x:Int32" Name="RestponseStatus" />
      <Variable x:TypeArguments="scg:List(x:String)" Name="RobotsDisconnected" />
      <Variable x:TypeArguments="scg:List(x:String)" Name="RobotsAvailable" />
      <Variable x:TypeArguments="scg:List(x:String)" Name="MachinesAvailable" />
      <Variable x:TypeArguments="x:String" Name="apiUrl" />
      <Variable x:TypeArguments="scg:List(scg:KeyValuePair(x:String, x:Int32))" Name="machinesAndRobots" />
      <Variable x:TypeArguments="scg:List(x:String)" Name="MachinesDisconnected" />
      <Variable x:TypeArguments="x:String" Name="ResponseForBusy" />
      <Variable x:TypeArguments="x:Int32" Name="RestponseStatusForBusy" />
      <Variable x:TypeArguments="scg:List(x:String)" Name="RobotsBusy" />
    </Sequence.Variables>
    <sap:WorkflowViewStateService.ViewState>
      <scg:Dictionary x:TypeArguments="x:String, x:Object">
        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
      </scg:Dictionary>
    </sap:WorkflowViewStateService.ViewState>
    <If Condition="[clientOrchestratorIsOnprem]" DisplayName="If orchestrator is onprem" sap:VirtualizedContainerService.HintSize="1248,52.8" sap2010:WorkflowViewState.IdRef="If_4">
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsExpanded">False</x:Boolean>
          <x:Boolean x:Key="IsPinned">False</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
      <If.Then>
        <Assign sap:VirtualizedContainerService.HintSize="262.4,60" sap2010:WorkflowViewState.IdRef="Assign_13">
          <Assign.To>
            <OutArgument x:TypeArguments="x:String">[apiUrl]</OutArgument>
          </Assign.To>
          <Assign.Value>
            <InArgument x:TypeArguments="x:String">[Url]</InArgument>
          </Assign.Value>
        </Assign>
      </If.Then>
      <If.Else>
        <Assign sap:VirtualizedContainerService.HintSize="262.4,60" sap2010:WorkflowViewState.IdRef="Assign_14">
          <Assign.To>
            <OutArgument x:TypeArguments="x:String">[apiUrl]</OutArgument>
          </Assign.To>
          <Assign.Value>
            <InArgument x:TypeArguments="x:String">[Url +TenantService + "/" + TenantLogicalName]</InArgument>
          </Assign.Value>
        </Assign>
      </If.Else>
    </If>
    <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="1248,52.8" sap2010:WorkflowViewState.IdRef="LogMessage_2" Level="Info" Message="[&quot;PendingJobs (&quot;+CountPendingJobs.ToString+&quot;)  &quot; + &#xA;&quot;EventsStart (&quot;+CountQEventsStart.ToString+&quot;)  &quot; + &#xA;&quot;EventsStop (&quot;+CountQEventsStop.ToString+&quot;)  &quot; + &#xA;&quot;RobotsHot (&quot;+CountRobotMachinesHot.ToString+&quot;)  &quot; + &#xA;&quot;RobotsCold (&quot;+CountRobotMachinesCold.ToString+&quot;)  &quot;]">
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsPinned">False</x:Boolean>
          <x:Boolean x:Key="IsExpanded">False</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
    </ui:LogMessage>
    <Sequence DisplayName="Init Sequence" sap:VirtualizedContainerService.HintSize="1248,68.8" sap2010:WorkflowViewState.IdRef="Sequence_17">
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsExpanded">False</x:Boolean>
          <x:Boolean x:Key="IsPinned">False</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
      <Assign sap:VirtualizedContainerService.HintSize="483.2,60" sap2010:WorkflowViewState.IdRef="Assign_15">
        <Assign.To>
          <OutArgument x:TypeArguments="scg:List(scg:KeyValuePair(x:String, x:Int32))">[machinesAndRobots]</OutArgument>
        </Assign.To>
        <Assign.Value>
          <InArgument x:TypeArguments="scg:List(scg:KeyValuePair(x:String, x:Int32))">[New List(Of KeyValuePair(Of String,Integer) )() From {}]</InArgument>
        </Assign.Value>
      </Assign>
      <If Condition="[SpecificRobotsForJobs Is Nothing]" sap:VirtualizedContainerService.HintSize="483.2,209.6" sap2010:WorkflowViewState.IdRef="If_5">
        <If.Then>
          <Assign sap:VirtualizedContainerService.HintSize="262.4,60" sap2010:WorkflowViewState.IdRef="Assign_16">
            <Assign.To>
              <OutArgument x:TypeArguments="scg:List(x:String)">[SpecificRobotsForJobs]</OutArgument>
            </Assign.To>
            <Assign.Value>
              <InArgument x:TypeArguments="scg:List(x:String)">[New List(Of String) From {}]</InArgument>
            </Assign.Value>
          </Assign>
        </If.Then>
      </If>
      <If Condition="[ProcessedVMs Is Nothing]" sap:VirtualizedContainerService.HintSize="483.2,209.6" sap2010:WorkflowViewState.IdRef="If_6">
        <If.Then>
          <Assign sap:VirtualizedContainerService.HintSize="262.4,60" sap2010:WorkflowViewState.IdRef="Assign_17">
            <Assign.To>
              <OutArgument x:TypeArguments="scg:List(x:String)">[ProcessedVMs]</OutArgument>
            </Assign.To>
            <Assign.Value>
              <InArgument x:TypeArguments="scg:List(x:String)">[New List(Of String) From {}]</InArgument>
            </Assign.Value>
          </Assign>
        </If.Then>
      </If>
    </Sequence>
    <If Condition="[State = &quot;Available&quot;]" DisplayName="If for Selecting Robot VMs by State" sap:VirtualizedContainerService.HintSize="1248,2813.6" sap2010:WorkflowViewState.IdRef="If_1">
      <If.Then>
        <Sequence DisplayName="Select Connected Robots to Stop" sap:VirtualizedContainerService.HintSize="200,68.8" sap2010:WorkflowViewState.IdRef="Sequence_6">
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">False</x:Boolean>
              <x:Boolean x:Key="IsPinned">False</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <ui:HttpClient Body="{x:Null}" ConsumerKey="{x:Null}" ConsumerSecret="{x:Null}" ContinueOnError="{x:Null}" OAuth1Token="{x:Null}" OAuth1TokenSecret="{x:Null}" OAuth2Token="{x:Null}" Password="{x:Null}" ResourcePath="{x:Null}" ResponseHeaders="{x:Null}" Username="{x:Null}" AcceptFormat="ANY" BodyFormat="application/json" ClientCertificate="[Nothing]" ClientCertificatePassword="[Nothing]" DisplayName="Get Available Sessions HTTP Request" EndPoint="[apiUrl + &quot;/odata/Sessions?$filter=(State eq '&quot;+State+&quot;' and IsUnresponsive eq false)&quot;]" sap:VirtualizedContainerService.HintSize="564.8,22.4" sap2010:WorkflowViewState.IdRef="HttpClient_1" Method="GET" Result="[Response]" StatusCode="[RestponseStatus]" TimeoutMS="60000">
            <ui:HttpClient.Attachments>
              <scg:Dictionary x:TypeArguments="x:String, InArgument(x:String)" />
            </ui:HttpClient.Attachments>
            <ui:HttpClient.Cookies>
              <scg:Dictionary x:TypeArguments="x:String, InArgument(x:String)" />
            </ui:HttpClient.Cookies>
            <ui:HttpClient.Headers>
              <InArgument x:TypeArguments="x:String" x:Key="X-UIPATH-TenantName">[TenantLogicalName]</InArgument>
              <InArgument x:TypeArguments="x:String" x:Key="Authorization">["Bearer " + Token]</InArgument>
              <InArgument x:TypeArguments="x:String" x:Key="X-UIPATH-OrganizationUnitId">[FolderId]</InArgument>
            </ui:HttpClient.Headers>
            <ui:HttpClient.Parameters>
              <scg:Dictionary x:TypeArguments="x:String, InArgument(x:String)" />
            </ui:HttpClient.Parameters>
            <ui:HttpClient.UrlSegments>
              <scg:Dictionary x:TypeArguments="x:String, InArgument(x:String)" />
            </ui:HttpClient.UrlSegments>
          </ui:HttpClient>
          <ui:MultipleAssign DisplayName="Multiple Assign" sap:VirtualizedContainerService.HintSize="564.8,130.4" sap2010:WorkflowViewState.IdRef="MultipleAssign_1">
            <ui:MultipleAssign.AssignOperations>
              <scg:List x:TypeArguments="ui:AssignOperation" Capacity="4">
                <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_1">
                  <ui:AssignOperation.To>
                    <OutArgument x:TypeArguments="scg:List(x:String)">[RobotsAvailable]</OutArgument>
                  </ui:AssignOperation.To>
                  <ui:AssignOperation.Value>
                    <InArgument x:TypeArguments="scg:List(x:String)">[JObject.Parse(Response)("value").Where(Function (r) UnattendedRobotsMachines.Contains(r("MachineName").ToString)).Select(Function(r) r("MachineName").ToString).ToList()]</InArgument>
                  </ui:AssignOperation.Value>
                </ui:AssignOperation>
                <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_2">
                  <ui:AssignOperation.To>
                    <OutArgument x:TypeArguments="scg:List(x:String)">[MachinesAvailable]</OutArgument>
                  </ui:AssignOperation.To>
                  <ui:AssignOperation.Value>
                    <InArgument x:TypeArguments="scg:List(x:String)">[RobotsAvailable.Distinct().ToList()]</InArgument>
                  </ui:AssignOperation.Value>
                </ui:AssignOperation>
              </scg:List>
            </ui:MultipleAssign.AssignOperations>
          </ui:MultipleAssign>
          <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="564.8,92.8" sap2010:WorkflowViewState.IdRef="LogMessage_3" Level="Info" Message="[RobotsAvailable.Count.ToString+&quot; Robots available in &quot;+ UnattendedRobotsMachines.Count.ToString + &quot; Machines&quot;]">
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsPinned">False</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
          </ui:LogMessage>
          <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="564.8,92.8" sap2010:WorkflowViewState.IdRef="LogMessage_6" Level="Info" Message="[&quot;Machines available (all): &quot; + JsonConvert.SerializeObject(MachinesAvailable).ToString]" />
          <Sequence DisplayName="KeepAlive Machines - Sequence" sap:VirtualizedContainerService.HintSize="564.8,793.6" sap2010:WorkflowViewState.IdRef="Sequence_20">
            <Sequence.Variables>
              <Variable x:TypeArguments="x:String" Name="assetRobotMachinesToKeepAlive" />
              <Variable x:TypeArguments="scg:List(x:String)" Name="MachinesKeepAlive" />
            </Sequence.Variables>
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
            <ui:GetRobotAsset TimeoutMS="{x:Null}" AssetName="RobotMachinesToKeepAlive" DisplayName="Get Asset" sap:VirtualizedContainerService.HintSize="523.2,22.4" sap2010:WorkflowViewState.IdRef="GetRobotAsset_1">
              <ui:GetRobotAsset.Value>
                <OutArgument x:TypeArguments="x:String">[assetRobotMachinesToKeepAlive]</OutArgument>
              </ui:GetRobotAsset.Value>
            </ui:GetRobotAsset>
            <If Condition="[Not assetRobotMachinesToKeepAlive.Equals(&quot;-&quot;)]" DisplayName="If any machines to KeepAlive" sap:VirtualizedContainerService.HintSize="523.2,638.4" sap2010:WorkflowViewState.IdRef="If_7">
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                  <x:Boolean x:Key="IsPinned">False</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
              <If.Then>
                <Sequence sap:VirtualizedContainerService.HintSize="379.2,488.8" sap2010:WorkflowViewState.IdRef="Sequence_19">
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                  <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="337.6,92.8" sap2010:WorkflowViewState.IdRef="LogMessage_7" Level="Info" Message="[&quot;Machines to KeepAlive: &quot; + assetRobotMachinesToKeepAlive]">
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsPinned">False</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                  </ui:LogMessage>
                  <ui:MultipleAssign DisplayName="Multiple Assign" sap:VirtualizedContainerService.HintSize="337.6,130.4" sap2010:WorkflowViewState.IdRef="MultipleAssign_4">
                    <ui:MultipleAssign.AssignOperations>
                      <scg:List x:TypeArguments="ui:AssignOperation" Capacity="4">
                        <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_6">
                          <ui:AssignOperation.To>
                            <OutArgument x:TypeArguments="scg:List(x:String)">[MachinesKeepAlive]</OutArgument>
                          </ui:AssignOperation.To>
                          <ui:AssignOperation.Value>
                            <InArgument x:TypeArguments="scg:List(x:String)">[Split(assetRobotMachinesToKeepAlive,",").ToList]</InArgument>
                          </ui:AssignOperation.Value>
                        </ui:AssignOperation>
                        <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_7">
                          <ui:AssignOperation.To>
                            <OutArgument x:TypeArguments="scg:List(x:String)">[MachinesAvailable]</OutArgument>
                          </ui:AssignOperation.To>
                          <ui:AssignOperation.Value>
                            <InArgument x:TypeArguments="scg:List(x:String)">[MachinesAvailable.Where(Function (m) Not MachinesKeepAlive.Contains(m)).ToList]</InArgument>
                          </ui:AssignOperation.Value>
                        </ui:AssignOperation>
                      </scg:List>
                    </ui:MultipleAssign.AssignOperations>
                  </ui:MultipleAssign>
                  <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="337.6,92.8" sap2010:WorkflowViewState.IdRef="LogMessage_8" Level="Info" Message="[&quot;Machines available (updated): &quot; + JsonConvert.SerializeObject(MachinesAvailable).ToString]" />
                </Sequence>
              </If.Then>
            </If>
          </Sequence>
          <ui:ForEach x:TypeArguments="x:String" CurrentIndex="{x:Null}" sap2010:Annotation.AnnotationText="list of&lt;machine, robotCount&gt;" DisplayName="For Each" sap:VirtualizedContainerService.HintSize="564.8,84" sap2010:WorkflowViewState.IdRef="ForEach`1_1" Values="[MachinesAvailable]">
            <ui:ForEach.Body>
              <ActivityAction x:TypeArguments="x:String">
                <ActivityAction.Argument>
                  <DelegateInArgument x:TypeArguments="x:String" Name="m" />
                </ActivityAction.Argument>
                <Sequence DisplayName="Body" sap:VirtualizedContainerService.HintSize="278.4,226.4" sap2010:WorkflowViewState.IdRef="Sequence_8">
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                  <InvokeMethod DisplayName="Invoke Method" sap:VirtualizedContainerService.HintSize="236.8,133.6" sap2010:WorkflowViewState.IdRef="InvokeMethod_2" MethodName="Add">
                    <InvokeMethod.TargetObject>
                      <InArgument x:TypeArguments="scg:List(scg:KeyValuePair(x:String, x:Int32))">[machinesAndRobots]</InArgument>
                    </InvokeMethod.TargetObject>
                    <InArgument x:TypeArguments="scg:KeyValuePair(x:String, x:Int32)">[New KeyValuePair(Of String, Integer) (m, RobotsAvailable.AsEnumerable.Count(Function(x) x.Equals(m)))]</InArgument>
                  </InvokeMethod>
                </Sequence>
              </ActivityAction>
            </ui:ForEach.Body>
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                <x:Boolean x:Key="IsPinned">False</x:Boolean>
                <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
          </ui:ForEach>
          <Sequence DisplayName="BusyRobots Sequence" sap:VirtualizedContainerService.HintSize="564.8,636" sap2010:WorkflowViewState.IdRef="Sequence_18">
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                <x:Boolean x:Key="IsPinned">False</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
            <ui:HttpClient Body="{x:Null}" ConsumerKey="{x:Null}" ConsumerSecret="{x:Null}" ContinueOnError="{x:Null}" OAuth1Token="{x:Null}" OAuth1TokenSecret="{x:Null}" OAuth2Token="{x:Null}" Password="{x:Null}" ResourcePath="{x:Null}" ResponseHeaders="{x:Null}" Username="{x:Null}" AcceptFormat="ANY" BodyFormat="application/json" ClientCertificate="[Nothing]" ClientCertificatePassword="[Nothing]" DisplayName="Get Busy Sessions HTTP Request" EndPoint="[apiUrl + &quot;/odata/Sessions?$filter=(State eq 'Busy')&quot;]" sap:VirtualizedContainerService.HintSize="337.6,22.4" sap2010:WorkflowViewState.IdRef="HttpClient_5" Method="GET" Result="[ResponseForBusy]" StatusCode="[RestponseStatusForBusy]" TimeoutMS="60000">
              <ui:HttpClient.Attachments>
                <scg:Dictionary x:TypeArguments="x:String, InArgument(x:String)" />
              </ui:HttpClient.Attachments>
              <ui:HttpClient.Cookies>
                <scg:Dictionary x:TypeArguments="x:String, InArgument(x:String)" />
              </ui:HttpClient.Cookies>
              <ui:HttpClient.Headers>
                <InArgument x:TypeArguments="x:String" x:Key="X-UIPATH-TenantName">[TenantLogicalName]</InArgument>
                <InArgument x:TypeArguments="x:String" x:Key="Authorization">["Bearer " + Token]</InArgument>
                <InArgument x:TypeArguments="x:String" x:Key="X-UIPATH-OrganizationUnitId">[FolderId]</InArgument>
              </ui:HttpClient.Headers>
              <ui:HttpClient.Parameters>
                <scg:Dictionary x:TypeArguments="x:String, InArgument(x:String)" />
              </ui:HttpClient.Parameters>
              <ui:HttpClient.UrlSegments>
                <scg:Dictionary x:TypeArguments="x:String, InArgument(x:String)" />
              </ui:HttpClient.UrlSegments>
            </ui:HttpClient>
            <ui:MultipleAssign sap2010:Annotation.AnnotationText="select currently busy robots" DisplayName="Multiple Assign" sap:VirtualizedContainerService.HintSize="337.6,130.4" sap2010:WorkflowViewState.IdRef="MultipleAssign_3">
              <ui:MultipleAssign.AssignOperations>
                <scg:List x:TypeArguments="ui:AssignOperation" Capacity="4">
                  <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_5">
                    <ui:AssignOperation.To>
                      <OutArgument x:TypeArguments="scg:List(x:String)">[RobotsBusy]</OutArgument>
                    </ui:AssignOperation.To>
                    <ui:AssignOperation.Value>
                      <InArgument x:TypeArguments="scg:List(x:String)">[JObject.Parse(ResponseForBusy)("value").Select(Function(x) x("MachineName").ToString).Where(Function (x) UnattendedRobotsMachines.Contains(x)).ToList()]</InArgument>
                    </ui:AssignOperation.Value>
                  </ui:AssignOperation>
                </scg:List>
              </ui:MultipleAssign.AssignOperations>
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
            </ui:MultipleAssign>
            <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="337.6,92.8" sap2010:WorkflowViewState.IdRef="LogMessage_9" Level="Info" Message="[&quot;Machines with Busy Robots: &quot; + JsonConvert.SerializeObject(RobotsBusy.Distinct()).ToString]" />
            <InvokeMethod sap2010:Annotation.AnnotationText="add busy robot machines to specified list" DisplayName="Invoke Method" sap:VirtualizedContainerService.HintSize="337.6,177.6" sap2010:WorkflowViewState.IdRef="InvokeMethod_4" MethodName="AddRange">
              <InvokeMethod.TargetObject>
                <InArgument x:TypeArguments="scg:List(x:String)">[SpecificRobotsForJobs]</InArgument>
              </InvokeMethod.TargetObject>
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
              <InArgument x:TypeArguments="scg:List(x:String)">[RobotsBusy]</InArgument>
            </InvokeMethod>
          </Sequence>
          <TryCatch DisplayName="Try Catch select Robot Machines to Stop" sap:VirtualizedContainerService.HintSize="564.8,52.8" sap2010:WorkflowViewState.IdRef="TryCatch_2">
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                <x:Boolean x:Key="IsPinned">False</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
            <TryCatch.Try>
              <Sequence sap:VirtualizedContainerService.HintSize="925.6,560" sap2010:WorkflowViewState.IdRef="Sequence_5">
                <sap:WorkflowViewStateService.ViewState>
                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                  </scg:Dictionary>
                </sap:WorkflowViewStateService.ViewState>
                <If Condition="[SpecificRobotsForJobs Is Nothing]" DisplayName="If Disconnected Robots are requested in next Pending Jobs" sap:VirtualizedContainerService.HintSize="884,467.2" sap2010:WorkflowViewState.IdRef="If_3">
                  <If.Then>
                    <Sequence sap:VirtualizedContainerService.HintSize="420,273.6" sap2010:WorkflowViewState.IdRef="Sequence_10">
                      <sap:WorkflowViewStateService.ViewState>
                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                        </scg:Dictionary>
                      </sap:WorkflowViewStateService.ViewState>
                      <ui:InvokeWorkflowFile ContinueOnError="{x:Null}" DisplayName="Invoke SelectRobotMachines_ToStop workflow" sap:VirtualizedContainerService.HintSize="378.4,88" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_1" UnSafe="False" WorkflowFileName="RobotMachinesSelection\SelectRobotMachines_ToStop.xaml">
                        <ui:InvokeWorkflowFile.Arguments>
                          <InArgument x:TypeArguments="scg:List(scg:KeyValuePair(x:String, x:Int32))" x:Key="MachinesAndRobots">[machinesAndRobots.Where(Function (x) Not ProcessedVMs.Contains(x.Key)).ToList()]</InArgument>
                          <OutArgument x:TypeArguments="scg:List(x:String)" x:Key="SelectedMachines">[SelectedVMsList]</OutArgument>
                          <InArgument x:TypeArguments="x:Int32" x:Key="RobotsCountToKeepAvailable">[CountRobotMachinesHot]</InArgument>
                        </ui:InvokeWorkflowFile.Arguments>
                      </ui:InvokeWorkflowFile>
                      <ui:CommentOut DisplayName="Comment Out" sap:VirtualizedContainerService.HintSize="378.4,52.8" sap2010:WorkflowViewState.IdRef="CommentOut_2">
                        <ui:CommentOut.Body>
                          <Sequence DisplayName="Ignored Activities" sap:VirtualizedContainerService.HintSize="304,152.8" sap2010:WorkflowViewState.IdRef="Sequence_11">
                            <sap:WorkflowViewStateService.ViewState>
                              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                              </scg:Dictionary>
                            </sap:WorkflowViewStateService.ViewState>
                            <Assign sap:VirtualizedContainerService.HintSize="262.4,60" sap2010:WorkflowViewState.IdRef="Assign_6">
                              <Assign.To>
                                <OutArgument x:TypeArguments="scg:List(x:String)">[SelectedVMsList]</OutArgument>
                              </Assign.To>
                              <Assign.Value>
                                <InArgument x:TypeArguments="scg:List(x:String)">[MachinesAvailable.Where(Function (x) Not ProcessedVMs.Contains(x)).Take(MachinesAvailable.Count - CountRobotMachinesHot).ToList()]</InArgument>
                              </Assign.Value>
                            </Assign>
                          </Sequence>
                        </ui:CommentOut.Body>
                        <sap:WorkflowViewStateService.ViewState>
                          <scg:Dictionary x:TypeArguments="x:String, x:Object">
                            <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                            <x:Boolean x:Key="IsPinned">False</x:Boolean>
                          </scg:Dictionary>
                        </sap:WorkflowViewStateService.ViewState>
                      </ui:CommentOut>
                    </Sequence>
                  </If.Then>
                  <If.Else>
                    <Sequence sap:VirtualizedContainerService.HintSize="420,317.6" sap2010:WorkflowViewState.IdRef="Sequence_4">
                      <sap:WorkflowViewStateService.ViewState>
                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                        </scg:Dictionary>
                      </sap:WorkflowViewStateService.ViewState>
                      <ui:InvokeWorkflowFile ContinueOnError="{x:Null}" sap2010:Annotation.AnnotationText="select only available robots that have no upcoming pending jobs" DisplayName="Invoke SelectRobotMachines_ToStop workflow" sap:VirtualizedContainerService.HintSize="378.4,132" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_3" UnSafe="False" WorkflowFileName="RobotMachinesSelection\SelectRobotMachines_ToStop.xaml">
                        <ui:InvokeWorkflowFile.Arguments>
                          <InArgument x:TypeArguments="scg:List(scg:KeyValuePair(x:String, x:Int32))" x:Key="MachinesAndRobots">[machinesAndRobots.Where(Function (x) (Not SpecificRobotsForJobs.Contains(x.Key)) And (Not ProcessedVMs.Contains(x.Key))).ToList()]</InArgument>
                          <OutArgument x:TypeArguments="scg:List(x:String)" x:Key="SelectedMachines">[SelectedVMsList]</OutArgument>
                          <InArgument x:TypeArguments="x:Int32" x:Key="RobotsCountToKeepAvailable">[CountRobotMachinesHot]</InArgument>
                        </ui:InvokeWorkflowFile.Arguments>
                        <sap:WorkflowViewStateService.ViewState>
                          <scg:Dictionary x:TypeArguments="x:String, x:Object">
                            <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                          </scg:Dictionary>
                        </sap:WorkflowViewStateService.ViewState>
                      </ui:InvokeWorkflowFile>
                      <ui:CommentOut DisplayName="Comment Out" sap:VirtualizedContainerService.HintSize="378.4,52.8" sap2010:WorkflowViewState.IdRef="CommentOut_3">
                        <ui:CommentOut.Body>
                          <Sequence DisplayName="Ignored Activities" sap:VirtualizedContainerService.HintSize="304,196.8" sap2010:WorkflowViewState.IdRef="Sequence_12">
                            <sap:WorkflowViewStateService.ViewState>
                              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                              </scg:Dictionary>
                            </sap:WorkflowViewStateService.ViewState>
                            <Assign sap2010:Annotation.AnnotationText="select only available robots that have no upcoming pending jobs" sap:VirtualizedContainerService.HintSize="262.4,104" sap2010:WorkflowViewState.IdRef="Assign_7">
                              <Assign.To>
                                <OutArgument x:TypeArguments="scg:List(x:String)">[SelectedVMsList]</OutArgument>
                              </Assign.To>
                              <Assign.Value>
                                <InArgument x:TypeArguments="scg:List(x:String)">[MachinesAvailable.Where(Function (x) (Not SpecificRobotsForJobs.Contains(x)) And (Not ProcessedVMs.Contains(x))).Take(MachinesAvailable.Count - CountRobotMachinesHot).ToList()]</InArgument>
                              </Assign.Value>
                              <sap:WorkflowViewStateService.ViewState>
                                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                  <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                                </scg:Dictionary>
                              </sap:WorkflowViewStateService.ViewState>
                            </Assign>
                          </Sequence>
                        </ui:CommentOut.Body>
                        <sap:WorkflowViewStateService.ViewState>
                          <scg:Dictionary x:TypeArguments="x:String, x:Object">
                            <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                            <x:Boolean x:Key="IsPinned">False</x:Boolean>
                          </scg:Dictionary>
                        </sap:WorkflowViewStateService.ViewState>
                      </ui:CommentOut>
                    </Sequence>
                  </If.Else>
                </If>
              </Sequence>
            </TryCatch.Try>
            <TryCatch.Catches>
              <Catch x:TypeArguments="s:Exception" sap:VirtualizedContainerService.HintSize="928.8,22.4" sap2010:WorkflowViewState.IdRef="Catch`1_2">
                <sap:WorkflowViewStateService.ViewState>
                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                    <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                    <x:Boolean x:Key="IsPinned">False</x:Boolean>
                  </scg:Dictionary>
                </sap:WorkflowViewStateService.ViewState>
                <ActivityAction x:TypeArguments="s:Exception">
                  <ActivityAction.Argument>
                    <DelegateInArgument x:TypeArguments="s:Exception" Name="exception" />
                  </ActivityAction.Argument>
                  <Assign sap:VirtualizedContainerService.HintSize="262.4,60" sap2010:WorkflowViewState.IdRef="Assign_8">
                    <Assign.To>
                      <OutArgument x:TypeArguments="scg:List(x:String)">[SelectedVMsList]</OutArgument>
                    </Assign.To>
                    <Assign.Value>
                      <InArgument x:TypeArguments="scg:List(x:String)">[Nothing]</InArgument>
                    </Assign.Value>
                  </Assign>
                </ActivityAction>
              </Catch>
            </TryCatch.Catches>
          </TryCatch>
          <If Condition="[SelectedVMsList IsNot Nothing]" DisplayName="If for performing Quarantine for selected robots" sap:VirtualizedContainerService.HintSize="564.8,237.6" sap2010:WorkflowViewState.IdRef="If_8">
            <If.Then>
              <ui:InvokeWorkflowFile ContinueOnError="{x:Null}" DisplayName="Invoke OrchestratorTenant_RobotQuarantineToggle workflow" sap:VirtualizedContainerService.HintSize="378.4,88" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_6" UnSafe="False" WorkflowFileName="RobotQuarantine\OrchestratorTenant_RobotQuarantineToggle.xaml">
                <ui:InvokeWorkflowFile.Arguments>
                  <InArgument x:TypeArguments="x:String" x:Key="Token">[Token]</InArgument>
                  <InArgument x:TypeArguments="x:String" x:Key="TenantLogicalName">[TenantLogicalName]</InArgument>
                  <InArgument x:TypeArguments="x:String" x:Key="TenantService">[TenantService]</InArgument>
                  <InArgument x:TypeArguments="x:String" x:Key="Url">[Url]</InArgument>
                  <InArgument x:TypeArguments="x:String" x:Key="TenantFolderId">[FolderId]</InArgument>
                  <InArgument x:TypeArguments="x:Boolean" x:Key="clientOrchestratorIsOnprem">[clientOrchestratorIsOnprem]</InArgument>
                  <InArgument x:TypeArguments="x:Boolean" x:Key="Quarantine">True</InArgument>
                  <InArgument x:TypeArguments="scg:List(x:String)" x:Key="SelectedMachines">[SelectedVMsList]</InArgument>
                  <InArgument x:TypeArguments="x:String" x:Key="clientEnvironment">[clientEnvironment]</InArgument>
                  <InArgument x:TypeArguments="x:String" x:Key="TempEnvName">[clientTempEnvName]</InArgument>
                  <InArgument x:TypeArguments="x:Boolean" x:Key="RobotStatusToggle">[clientRobotStatusToggle]</InArgument>
                </ui:InvokeWorkflowFile.Arguments>
              </ui:InvokeWorkflowFile>
            </If.Then>
          </If>
        </Sequence>
      </If.Then>
      <If.Else>
        <Sequence DisplayName="Select Disconnected Robot Machines to Start" sap:VirtualizedContainerService.HintSize="1004,2664" sap2010:WorkflowViewState.IdRef="Sequence_7">
          <Sequence.Variables>
            <Variable x:TypeArguments="x:String" Name="ResponseForBusyAvailable" />
            <Variable x:TypeArguments="x:Int32" Name="RestponseStatusForBusyAvailable" />
          </Sequence.Variables>
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
              <x:Boolean x:Key="IsPinned">False</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <ui:HttpClient Body="{x:Null}" ConsumerKey="{x:Null}" ConsumerSecret="{x:Null}" ContinueOnError="{x:Null}" OAuth1Token="{x:Null}" OAuth1TokenSecret="{x:Null}" OAuth2Token="{x:Null}" Password="{x:Null}" ResourcePath="{x:Null}" ResponseHeaders="{x:Null}" Username="{x:Null}" AcceptFormat="ANY" BodyFormat="application/json" ClientCertificate="[Nothing]" ClientCertificatePassword="[Nothing]" DisplayName="Get Disconnected Sessions HTTP Request" EndPoint="[apiUrl + &quot;/odata/Sessions?$filter=((State eq '&quot;+State+&quot;') or (State eq 'Available' and IsUnresponsive eq true))&quot;]" sap:VirtualizedContainerService.HintSize="962.4,22.4" sap2010:WorkflowViewState.IdRef="HttpClient_2" Method="GET" Result="[Response]" StatusCode="[RestponseStatus]" TimeoutMS="60000">
            <ui:HttpClient.Attachments>
              <scg:Dictionary x:TypeArguments="x:String, InArgument(x:String)" />
            </ui:HttpClient.Attachments>
            <ui:HttpClient.Cookies>
              <scg:Dictionary x:TypeArguments="x:String, InArgument(x:String)" />
            </ui:HttpClient.Cookies>
            <ui:HttpClient.Headers>
              <InArgument x:TypeArguments="x:String" x:Key="X-UIPATH-TenantName">[TenantLogicalName]</InArgument>
              <InArgument x:TypeArguments="x:String" x:Key="Authorization">["Bearer " + Token]</InArgument>
              <InArgument x:TypeArguments="x:String" x:Key="X-UIPATH-OrganizationUnitId">[FolderId]</InArgument>
            </ui:HttpClient.Headers>
            <ui:HttpClient.Parameters>
              <scg:Dictionary x:TypeArguments="x:String, InArgument(x:String)" />
            </ui:HttpClient.Parameters>
            <ui:HttpClient.UrlSegments>
              <scg:Dictionary x:TypeArguments="x:String, InArgument(x:String)" />
            </ui:HttpClient.UrlSegments>
          </ui:HttpClient>
          <ui:MultipleAssign DisplayName="Multiple Assign" sap:VirtualizedContainerService.HintSize="962.4,130.4" sap2010:WorkflowViewState.IdRef="MultipleAssign_2">
            <ui:MultipleAssign.AssignOperations>
              <scg:List x:TypeArguments="ui:AssignOperation" Capacity="4">
                <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_3">
                  <ui:AssignOperation.To>
                    <OutArgument x:TypeArguments="scg:List(x:String)">[RobotsDisconnected]</OutArgument>
                  </ui:AssignOperation.To>
                  <ui:AssignOperation.Value>
                    <InArgument x:TypeArguments="scg:List(x:String)">[JObject.Parse(Response)("value").Where(Function (r) UnattendedRobotsMachines.Contains(r("MachineName").ToString)).Select(Function(x) x("MachineName").ToString).ToList()]</InArgument>
                  </ui:AssignOperation.Value>
                </ui:AssignOperation>
                <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_4">
                  <ui:AssignOperation.To>
                    <OutArgument x:TypeArguments="scg:List(x:String)">[MachinesDisconnected]</OutArgument>
                  </ui:AssignOperation.To>
                  <ui:AssignOperation.Value>
                    <InArgument x:TypeArguments="scg:List(x:String)">[RobotsDisconnected.Distinct().ToList()]</InArgument>
                  </ui:AssignOperation.Value>
                </ui:AssignOperation>
              </scg:List>
            </ui:MultipleAssign.AssignOperations>
          </ui:MultipleAssign>
          <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="962.4,92.8" sap2010:WorkflowViewState.IdRef="LogMessage_4" Level="Info" Message="[&quot;RobotsDisconnected (&quot;+RobotsDisconnected.Count.ToString+&quot;)&quot;]">
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsPinned">False</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
          </ui:LogMessage>
          <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="962.4,92.8" sap2010:WorkflowViewState.IdRef="LogMessage_10" Level="Info" Message="[&quot;Machines disconnected (all): &quot; + JsonConvert.SerializeObject(MachinesDisconnected).ToString]" />
          <ui:ForEach x:TypeArguments="x:String" CurrentIndex="{x:Null}" sap2010:Annotation.AnnotationText="list of&lt;machine, robotCount&gt;" DisplayName="For Each" sap:VirtualizedContainerService.HintSize="962.4,392" sap2010:WorkflowViewState.IdRef="ForEach`1_2" Values="[MachinesDisconnected]">
            <ui:ForEach.Body>
              <ActivityAction x:TypeArguments="x:String">
                <ActivityAction.Argument>
                  <DelegateInArgument x:TypeArguments="x:String" Name="m" />
                </ActivityAction.Argument>
                <Sequence DisplayName="Body" sap:VirtualizedContainerService.HintSize="278.4,226.4" sap2010:WorkflowViewState.IdRef="Sequence_13">
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                  <InvokeMethod DisplayName="Invoke Method" sap:VirtualizedContainerService.HintSize="236.8,133.6" sap2010:WorkflowViewState.IdRef="InvokeMethod_3" MethodName="Add">
                    <InvokeMethod.TargetObject>
                      <InArgument x:TypeArguments="scg:List(scg:KeyValuePair(x:String, x:Int32))">[machinesAndRobots]</InArgument>
                    </InvokeMethod.TargetObject>
                    <InArgument x:TypeArguments="scg:KeyValuePair(x:String, x:Int32)">[New KeyValuePair(Of String, Integer) (m, RobotsDisconnected.AsEnumerable.Count(Function(x) x.Equals(m)))]</InArgument>
                  </InvokeMethod>
                </Sequence>
              </ActivityAction>
            </ui:ForEach.Body>
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                <x:Boolean x:Key="IsPinned">False</x:Boolean>
                <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
          </ui:ForEach>
          <TryCatch DisplayName="Try Catch select Robots to Start" sap:VirtualizedContainerService.HintSize="962.4,1640.8" sap2010:WorkflowViewState.IdRef="TryCatch_1">
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                <x:Boolean x:Key="IsPinned">False</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
            <TryCatch.Try>
              <Sequence sap:VirtualizedContainerService.HintSize="925.6,1409.6" sap2010:WorkflowViewState.IdRef="Sequence_2">
                <sap:WorkflowViewStateService.ViewState>
                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                  </scg:Dictionary>
                </sap:WorkflowViewStateService.ViewState>
                <If Condition="[SpecificRobotsForJobs Is Nothing]" DisplayName="If Specific Robots not requested" sap:VirtualizedContainerService.HintSize="884,1316.8" sap2010:WorkflowViewState.IdRef="If_2">
                  <If.Then>
                    <Sequence sap:VirtualizedContainerService.HintSize="420,273.6" sap2010:WorkflowViewState.IdRef="Sequence_14">
                      <sap:WorkflowViewStateService.ViewState>
                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                        </scg:Dictionary>
                      </sap:WorkflowViewStateService.ViewState>
                      <ui:InvokeWorkflowFile ContinueOnError="{x:Null}" DisplayName="Invoke SelectRobotMachines_ToStart workflow" sap:VirtualizedContainerService.HintSize="378.4,88" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_4" UnSafe="False" WorkflowFileName="RobotMachinesSelection\SelectRobotMachines_ToStart.xaml">
                        <ui:InvokeWorkflowFile.Arguments>
                          <InArgument x:TypeArguments="scg:List(scg:KeyValuePair(x:String, x:Int32))" x:Key="MachinesAndRobots">[machinesAndRobots]</InArgument>
                          <InArgument x:TypeArguments="x:Int32" x:Key="PendingJobs">[CountPendingJobs]</InArgument>
                          <OutArgument x:TypeArguments="scg:List(x:String)" x:Key="SelectedMachines">[SelectedVMsList]</OutArgument>
                        </ui:InvokeWorkflowFile.Arguments>
                      </ui:InvokeWorkflowFile>
                      <ui:CommentOut DisplayName="Comment Out" sap:VirtualizedContainerService.HintSize="378.4,52.8" sap2010:WorkflowViewState.IdRef="CommentOut_4">
                        <ui:CommentOut.Body>
                          <Sequence DisplayName="Ignored Activities" sap:VirtualizedContainerService.HintSize="304,152.8" sap2010:WorkflowViewState.IdRef="Sequence_15">
                            <sap:WorkflowViewStateService.ViewState>
                              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                              </scg:Dictionary>
                            </sap:WorkflowViewStateService.ViewState>
                            <Assign sap:VirtualizedContainerService.HintSize="262.4,60" sap2010:WorkflowViewState.IdRef="Assign_3">
                              <Assign.To>
                                <OutArgument x:TypeArguments="scg:List(x:String)">[SelectedVMsList]</OutArgument>
                              </Assign.To>
                              <Assign.Value>
                                <InArgument x:TypeArguments="scg:List(x:String)">[RobotsDisconnected.Distinct().Take(CountPendingJobs).ToList()]</InArgument>
                              </Assign.Value>
                            </Assign>
                          </Sequence>
                        </ui:CommentOut.Body>
                        <sap:WorkflowViewStateService.ViewState>
                          <scg:Dictionary x:TypeArguments="x:String, x:Object">
                            <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                            <x:Boolean x:Key="IsPinned">False</x:Boolean>
                          </scg:Dictionary>
                        </sap:WorkflowViewStateService.ViewState>
                      </ui:CommentOut>
                    </Sequence>
                  </If.Then>
                  <If.Else>
                    <Sequence sap:VirtualizedContainerService.HintSize="420,1167.2" sap2010:WorkflowViewState.IdRef="Sequence_3">
                      <Sequence.Variables>
                        <Variable x:TypeArguments="scg:List(x:String)" Name="SpecifiedRobotsBusyOrAvailable" />
                      </Sequence.Variables>
                      <sap:WorkflowViewStateService.ViewState>
                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                        </scg:Dictionary>
                      </sap:WorkflowViewStateService.ViewState>
                      <ui:HttpClient Body="{x:Null}" ConsumerKey="{x:Null}" ConsumerSecret="{x:Null}" ContinueOnError="{x:Null}" OAuth1Token="{x:Null}" OAuth1TokenSecret="{x:Null}" OAuth2Token="{x:Null}" Password="{x:Null}" ResourcePath="{x:Null}" ResponseHeaders="{x:Null}" Username="{x:Null}" AcceptFormat="ANY" BodyFormat="application/json" ClientCertificate="[Nothing]" ClientCertificatePassword="[Nothing]" DisplayName="Get Specified BusyOrAvailable Sessions HTTP Request" EndPoint="[apiUrl + &quot;/odata/Sessions?$filter=((State eq 'Busy') or (State eq 'Available' and IsUnresponsive eq false))&quot;]" sap:VirtualizedContainerService.HintSize="378.4,22.4" sap2010:WorkflowViewState.IdRef="HttpClient_4" Method="GET" Result="[ResponseForBusyAvailable]" StatusCode="[RestponseStatusForBusyAvailable]" TimeoutMS="60000">
                        <ui:HttpClient.Attachments>
                          <scg:Dictionary x:TypeArguments="x:String, InArgument(x:String)" />
                        </ui:HttpClient.Attachments>
                        <ui:HttpClient.Cookies>
                          <scg:Dictionary x:TypeArguments="x:String, InArgument(x:String)" />
                        </ui:HttpClient.Cookies>
                        <ui:HttpClient.Headers>
                          <InArgument x:TypeArguments="x:String" x:Key="X-UIPATH-TenantName">[TenantLogicalName]</InArgument>
                          <InArgument x:TypeArguments="x:String" x:Key="Authorization">["Bearer " + Token]</InArgument>
                          <InArgument x:TypeArguments="x:String" x:Key="X-UIPATH-OrganizationUnitId">[FolderId]</InArgument>
                        </ui:HttpClient.Headers>
                        <ui:HttpClient.Parameters>
                          <scg:Dictionary x:TypeArguments="x:String, InArgument(x:String)" />
                        </ui:HttpClient.Parameters>
                        <ui:HttpClient.UrlSegments>
                          <scg:Dictionary x:TypeArguments="x:String, InArgument(x:String)" />
                        </ui:HttpClient.UrlSegments>
                      </ui:HttpClient>
                      <Assign sap2010:Annotation.AnnotationText="select currently busy robots that also have upcoming pending jobs" sap:VirtualizedContainerService.HintSize="378.4,104" sap2010:WorkflowViewState.IdRef="Assign_9">
                        <Assign.To>
                          <OutArgument x:TypeArguments="scg:List(x:String)">[SpecifiedRobotsBusyOrAvailable]</OutArgument>
                        </Assign.To>
                        <Assign.Value>
                          <InArgument x:TypeArguments="scg:List(x:String)">[JObject.Parse(ResponseForBusyAvailable)("value").Select(Function(x) x("MachineName").ToString).Where(Function (x) SpecificRobotsForJobs.Contains(x) And UnattendedRobotsMachines.Contains(x)).ToList()]</InArgument>
                        </Assign.Value>
                        <sap:WorkflowViewStateService.ViewState>
                          <scg:Dictionary x:TypeArguments="x:String, x:Object">
                            <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                          </scg:Dictionary>
                        </sap:WorkflowViewStateService.ViewState>
                      </Assign>
                      <Assign sap2010:Annotation.AnnotationText="filter out specified robot machines that are already available or busy" sap:VirtualizedContainerService.HintSize="378.4,104" sap2010:WorkflowViewState.IdRef="Assign_10">
                        <Assign.To>
                          <OutArgument x:TypeArguments="scg:List(x:String)">[SpecificRobotsForJobs]</OutArgument>
                        </Assign.To>
                        <Assign.Value>
                          <InArgument x:TypeArguments="scg:List(x:String)">[SpecificRobotsForJobs.Where(Function (x) Not SpecifiedRobotsBusyOrAvailable.Contains(x)).Distinct().ToList()]</InArgument>
                        </Assign.Value>
                        <sap:WorkflowViewStateService.ViewState>
                          <scg:Dictionary x:TypeArguments="x:String, x:Object">
                            <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                          </scg:Dictionary>
                        </sap:WorkflowViewStateService.ViewState>
                      </Assign>
                      <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="378.4,92.8" sap2010:WorkflowViewState.IdRef="LogMessage_11" Level="Info" Message="[&quot;Machines with Robots Busy or AlreadyAvailable: &quot; + JsonConvert.SerializeObject(SpecificRobotsForJobs.Distinct()).ToString]" />
                      <ui:InvokeWorkflowFile ContinueOnError="{x:Null}" sap2010:Annotation.AnnotationText="Select any disconnected Robot Machines that are not part of the specified list" DisplayName="Invoke SelectRobotMachines_ToStart workflow" sap:VirtualizedContainerService.HintSize="378.4,132" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_5" UnSafe="False" WorkflowFileName="RobotMachinesSelection\SelectRobotMachines_ToStart.xaml">
                        <ui:InvokeWorkflowFile.Arguments>
                          <InArgument x:TypeArguments="scg:List(scg:KeyValuePair(x:String, x:Int32))" x:Key="MachinesAndRobots">[machinesAndRobots.Where(Function(mr) Not SpecificRobotsForJobs.Contains(mr.Key)).ToList()]</InArgument>
                          <InArgument x:TypeArguments="x:Int32" x:Key="PendingJobs">[CountPendingJobs - machinesAndRobots.Where(Function(mr) SpecificRobotsForJobs.Contains(mr.Key)).Sum(Function(r) r.Value)]</InArgument>
                          <OutArgument x:TypeArguments="scg:List(x:String)" x:Key="SelectedMachines">[SelectedVMsList]</OutArgument>
                        </ui:InvokeWorkflowFile.Arguments>
                        <sap:WorkflowViewStateService.ViewState>
                          <scg:Dictionary x:TypeArguments="x:String, x:Object">
                            <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                          </scg:Dictionary>
                        </sap:WorkflowViewStateService.ViewState>
                      </ui:InvokeWorkflowFile>
                      <ui:CommentOut DisplayName="Comment Out" sap:VirtualizedContainerService.HintSize="378.4,52.8" sap2010:WorkflowViewState.IdRef="CommentOut_5">
                        <ui:CommentOut.Body>
                          <Sequence DisplayName="Ignored Activities" sap:VirtualizedContainerService.HintSize="304,196.8" sap2010:WorkflowViewState.IdRef="Sequence_16">
                            <sap:WorkflowViewStateService.ViewState>
                              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                              </scg:Dictionary>
                            </sap:WorkflowViewStateService.ViewState>
                            <Assign sap2010:Annotation.AnnotationText="Select any disconnected Robot Machines that are not part of the specified list" sap:VirtualizedContainerService.HintSize="262.4,104" sap2010:WorkflowViewState.IdRef="Assign_5">
                              <Assign.To>
                                <OutArgument x:TypeArguments="scg:List(x:String)">[SelectedVMsList]</OutArgument>
                              </Assign.To>
                              <Assign.Value>
                                <InArgument x:TypeArguments="scg:List(x:String)">[JObject.Parse(Response)("value").Select(Function(x) x("HostMachineName").ToString).Where(Function (x) UnattendedRobotsMachines.Contains(x) And (Not SpecificRobotsForJobs.Contains(x))).Distinct().Take(CountPendingJobs-SpecificRobotsForJobs.Count).ToList()]</InArgument>
                              </Assign.Value>
                              <sap:WorkflowViewStateService.ViewState>
                                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                  <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                                </scg:Dictionary>
                              </sap:WorkflowViewStateService.ViewState>
                            </Assign>
                          </Sequence>
                        </ui:CommentOut.Body>
                        <sap:WorkflowViewStateService.ViewState>
                          <scg:Dictionary x:TypeArguments="x:String, x:Object">
                            <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                            <x:Boolean x:Key="IsPinned">False</x:Boolean>
                          </scg:Dictionary>
                        </sap:WorkflowViewStateService.ViewState>
                      </ui:CommentOut>
                      <InvokeMethod sap2010:Annotation.AnnotationText="append to the random selected robots list the specified disconnected robots" DisplayName="Invoke Method" sap:VirtualizedContainerService.HintSize="378.4,193.6" sap2010:WorkflowViewState.IdRef="InvokeMethod_1" MethodName="AddRange">
                        <InvokeMethod.TargetObject>
                          <InArgument x:TypeArguments="scg:List(x:String)">[SelectedVMsList]</InArgument>
                        </InvokeMethod.TargetObject>
                        <sap:WorkflowViewStateService.ViewState>
                          <scg:Dictionary x:TypeArguments="x:String, x:Object">
                            <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                          </scg:Dictionary>
                        </sap:WorkflowViewStateService.ViewState>
                        <InArgument x:TypeArguments="scg:List(x:String)">[SpecificRobotsForJobs]</InArgument>
                      </InvokeMethod>
                      <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="378.4,92.8" sap2010:WorkflowViewState.IdRef="LogMessage_12" Level="Info" Message="[&quot;Selected disconnected + explicitly specified machines: &quot; + JsonConvert.SerializeObject(SelectedVMsList).ToString]" />
                    </Sequence>
                  </If.Else>
                </If>
              </Sequence>
            </TryCatch.Try>
            <TryCatch.Catches>
              <Catch x:TypeArguments="s:Exception" sap:VirtualizedContainerService.HintSize="928.8,22.4" sap2010:WorkflowViewState.IdRef="Catch`1_1">
                <sap:WorkflowViewStateService.ViewState>
                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                    <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                    <x:Boolean x:Key="IsPinned">False</x:Boolean>
                  </scg:Dictionary>
                </sap:WorkflowViewStateService.ViewState>
                <ActivityAction x:TypeArguments="s:Exception">
                  <ActivityAction.Argument>
                    <DelegateInArgument x:TypeArguments="s:Exception" Name="exception" />
                  </ActivityAction.Argument>
                  <Assign sap:VirtualizedContainerService.HintSize="262.4,60" sap2010:WorkflowViewState.IdRef="Assign_2">
                    <Assign.To>
                      <OutArgument x:TypeArguments="scg:List(x:String)">[SelectedVMsList]</OutArgument>
                    </Assign.To>
                    <Assign.Value>
                      <InArgument x:TypeArguments="scg:List(x:String)">[Nothing]</InArgument>
                    </Assign.Value>
                  </Assign>
                </ActivityAction>
              </Catch>
            </TryCatch.Catches>
          </TryCatch>
        </Sequence>
      </If.Else>
    </If>
    <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="1248,92.8" sap2010:WorkflowViewState.IdRef="LogMessage_1" Level="Info" Message="[&quot;Selected RobotVMs (&quot;+State+&quot;) count: &quot; + SelectedVMsList.Count.ToString]" />
  </Sequence>
</Activity>