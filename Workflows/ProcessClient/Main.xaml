<Activity mc:Ignorable="sap sap2010" x:Class="Main" this:Main.SpecifiedClientId="-1" xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities" xmlns:av="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:mva="clr-namespace:Microsoft.VisualBasic.Activities;assembly=System.Activities" xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation" xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation" xmlns:scg="clr-namespace:System.Collections.Generic;assembly=mscorlib" xmlns:this="clr-namespace:" xmlns:ui="http://schemas.uipath.com/workflow/activities" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <x:Members>
    <x:Property sap2010:Annotation.AnnotationText="If the argument's value is Not Nothing, the workflow will skip the queue events retrieval and will proceed to getting the Client info from the Database based on the provided Id." Name="SpecifiedClientId" Type="InArgument(x:Int32)" />
  </x:Members>
  <mva:VisualBasic.Settings>
    <x:Null />
  </mva:VisualBasic.Settings>
  <sap:VirtualizedContainerService.HintSize>1544.8,2822.4</sap:VirtualizedContainerService.HintSize>
  <sap2010:WorkflowViewState.IdRef>ActivityBuilder_1</sap2010:WorkflowViewState.IdRef>
  <TextExpression.NamespacesForImplementation>
    <scg:List x:TypeArguments="x:String" Capacity="48">
      <x:String>System.Activities</x:String>
      <x:String>System.Activities.Statements</x:String>
      <x:String>System.Activities.Expressions</x:String>
      <x:String>System.Activities.Validation</x:String>
      <x:String>System.Activities.XamlIntegration</x:String>
      <x:String>Microsoft.VisualBasic</x:String>
      <x:String>Microsoft.VisualBasic.Activities</x:String>
      <x:String>System</x:String>
      <x:String>System.Collections</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Diagnostics</x:String>
      <x:String>System.Drawing</x:String>
      <x:String>System.IO</x:String>
      <x:String>System.Linq</x:String>
      <x:String>System.Net.Mail</x:String>
      <x:String>System.Xml</x:String>
      <x:String>System.Xml.Linq</x:String>
      <x:String>UiPath.Core</x:String>
      <x:String>UiPath.Core.Activities</x:String>
      <x:String>System.Windows.Markup</x:String>
      <x:String>System.Security</x:String>
      <x:String>Microsoft.VisualBasic.CompilerServices</x:String>
      <x:String>UiPath.AmazonWebServices.Models</x:String>
    </scg:List>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <scg:List x:TypeArguments="AssemblyReference" Capacity="24">
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>Microsoft.VisualBasic</AssemblyReference>
      <AssemblyReference>mscorlib</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Drawing</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>PresentationFramework</AssemblyReference>
      <AssemblyReference>WindowsBase</AssemblyReference>
      <AssemblyReference>PresentationCore</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities</AssemblyReference>
      <AssemblyReference>UiPath.UiAutomation.Activities</AssemblyReference>
      <AssemblyReference>System.ValueTuple</AssemblyReference>
      <AssemblyReference>System.ServiceModel</AssemblyReference>
      <AssemblyReference>UiPath.Azure</AssemblyReference>
      <AssemblyReference>System.ComponentModel.Composition</AssemblyReference>
      <AssemblyReference>UiPath.AmazonWebServices</AssemblyReference>
      <AssemblyReference>UiPath.Mail</AssemblyReference>
      <AssemblyReference>UiPath.Excel</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities.Design</AssemblyReference>
      <AssemblyReference>System.Memory</AssemblyReference>
    </scg:List>
  </TextExpression.ReferencesForImplementation>
  <sap:WorkflowViewStateService.ViewState>
    <scg:Dictionary x:TypeArguments="x:String, x:Object">
      <x:Boolean x:Key="ShouldExpandAll">True</x:Boolean>
    </scg:Dictionary>
  </sap:WorkflowViewStateService.ViewState>
  <Sequence DisplayName="Root" sap:VirtualizedContainerService.HintSize="1555.2,2657.6" sap2010:WorkflowViewState.IdRef="Sequence_5">
    <Sequence.Variables>
      <Variable x:TypeArguments="ui:QueueItem" Name="QueueItem" />
      <Variable x:TypeArguments="x:String" Name="QueueName" />
      <Variable x:TypeArguments="x:String" Name="clientUrl" />
      <Variable x:TypeArguments="x:String" Name="clientSecret" />
      <Variable x:TypeArguments="x:String" Name="clientId" />
      <Variable x:TypeArguments="x:String" Name="clientLogicalName" />
      <Variable x:TypeArguments="x:String" Name="clientService" />
      <Variable x:TypeArguments="x:String" Name="clientInfrastructure" />
      <Variable x:TypeArguments="x:String" Name="clientToken" />
      <Variable x:TypeArguments="x:Int32" Name="clientRobotsUsedAttended" />
      <Variable x:TypeArguments="x:Int32" Name="clientRobotsUsedUnattended" />
      <Variable x:TypeArguments="x:Int32" Name="clientRobotsLicensedAttended" />
      <Variable x:TypeArguments="x:Int32" Name="clientRobotsLicensedUnattended" />
      <Variable x:TypeArguments="x:String" Name="Azure_TenantID" />
      <Variable x:TypeArguments="x:String" Name="Azure_ClientID" />
      <Variable x:TypeArguments="x:String" Name="Azure_ClientSecret" />
      <Variable x:TypeArguments="x:String" Name="Azure_SubscriptionID" />
      <Variable x:TypeArguments="x:String" Name="clientEnvironment" />
      <Variable x:TypeArguments="x:String" Name="Azure_ResourceGroup" />
      <Variable x:TypeArguments="x:Int32" Name="clientJobsPending" />
      <Variable x:TypeArguments="x:String" Name="clientTenantId" />
      <Variable x:TypeArguments="x:Int32" Name="clientRobotsProvisioned" />
      <Variable x:TypeArguments="x:String" Name="clientFolderName" />
      <Variable x:TypeArguments="x:String" Name="clientFolderId" />
      <Variable x:TypeArguments="x:String" Name="clientUrlAuth" />
      <Variable x:TypeArguments="x:Boolean" Name="clientIsAdmin" />
      <Variable x:TypeArguments="x:String" Name="TenantsDbConnectionString" />
      <Variable x:TypeArguments="x:Int32" Name="clientRobotsHot" />
      <Variable x:TypeArguments="x:Int32" Name="clientRobotsCold" />
      <Variable x:TypeArguments="x:Int32" Name="clientRobotsVirtual" />
      <Variable x:TypeArguments="x:String" Name="clientVmTemplate" />
      <Variable x:TypeArguments="scg:List(x:String)" Name="clientSpecificRobotsForJobs" />
      <Variable x:TypeArguments="x:Int32" Name="clientEventsForStartRobots" />
      <Variable x:TypeArguments="x:Int32" Name="clientEventsForStopRobots" />
      <Variable x:TypeArguments="scg:List(x:String)" Name="processedVMs" />
      <Variable x:TypeArguments="scg:List(x:String)" Name="clientUnattendedRobotsMachines" />
      <Variable x:TypeArguments="x:Boolean" Name="clientOrchestratorIsOnPrem" />
      <Variable x:TypeArguments="x:Boolean" Name="clientEnvironmentLevelCounters" />
      <Variable x:TypeArguments="x:String" Name="clientEventEnvironmentName" />
      <Variable x:TypeArguments="x:String" Name="clientRobotsType" />
      <Variable x:TypeArguments="scg:IEnumerable(ui:QueueItem)" Default="[{}]" Name="QueueItems" />
      <Variable x:TypeArguments="scg:List(x:String)" Name="clientEnvironmentReleasesList" />
      <Variable x:TypeArguments="scg:List(x:String)" Name="clientEnvironmentReleasesIDsList" />
      <Variable x:TypeArguments="x:String" sap2010:Annotation.AnnotationText="should be used when debugging across folders" Name="AdminTenantFolder" />
      <Variable x:TypeArguments="scg:List(x:String)" Name="clientEnvironmentReleases" />
      <Variable x:TypeArguments="x:String" Name="clientTempEnvName" />
      <Variable x:TypeArguments="x:Boolean" Name="clientRobotStatusToggle" />
    </Sequence.Variables>
    <sap:WorkflowViewStateService.ViewState>
      <scg:Dictionary x:TypeArguments="x:String, x:Object">
        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
      </scg:Dictionary>
    </sap:WorkflowViewStateService.ViewState>
    <Sequence DisplayName="Initialization Sequence" sap:VirtualizedContainerService.HintSize="1513.6,68.8" sap2010:WorkflowViewState.IdRef="Sequence_7">
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsExpanded">False</x:Boolean>
          <x:Boolean x:Key="IsPinned">True</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
      <ui:GetRobotAsset TimeoutMS="{x:Null}" AssetName="AdminTenantEventsQueueName" DisplayName="QueueName - Get Asset" FolderPath="[AdminTenantFolder]" sap:VirtualizedContainerService.HintSize="200,22.4" sap2010:WorkflowViewState.IdRef="GetRobotAsset_1">
        <ui:GetRobotAsset.Value>
          <OutArgument x:TypeArguments="x:String">[QueueName]</OutArgument>
        </ui:GetRobotAsset.Value>
      </ui:GetRobotAsset>
      <ui:GetRobotAsset TimeoutMS="{x:Null}" AssetName="TenantsDbConnectionString" DisplayName="Tenants DB CS - Get Asset" FolderPath="[AdminTenantFolder]" sap:VirtualizedContainerService.HintSize="200,22.4" sap2010:WorkflowViewState.IdRef="GetRobotAsset_3">
        <ui:GetRobotAsset.Value>
          <OutArgument x:TypeArguments="x:String">[TenantsDbConnectionString]</OutArgument>
        </ui:GetRobotAsset.Value>
      </ui:GetRobotAsset>
      <ui:GetRobotAsset TimeoutMS="{x:Null}" AssetName="EnvironmentLevelCounters" DisplayName="EnvironmentLevelCounters Get Asset" sap:VirtualizedContainerService.HintSize="200,22.4" sap2010:WorkflowViewState.IdRef="GetRobotAsset_4">
        <ui:GetRobotAsset.Value>
          <OutArgument x:TypeArguments="x:Boolean">[clientEnvironmentLevelCounters]</OutArgument>
        </ui:GetRobotAsset.Value>
      </ui:GetRobotAsset>
      <ui:GetRobotAsset TimeoutMS="{x:Null}" AssetName="RobotsType" DisplayName="RobotsType Get Asset" sap:VirtualizedContainerService.HintSize="200,22.4" sap2010:WorkflowViewState.IdRef="GetRobotAsset_5">
        <ui:GetRobotAsset.Value>
          <OutArgument x:TypeArguments="x:String">[clientRobotsType]</OutArgument>
        </ui:GetRobotAsset.Value>
      </ui:GetRobotAsset>
      <ui:GetRobotAsset TimeoutMS="{x:Null}" AssetName="Common_RobotStatusToggle" DisplayName="Common_RobotStatusToggle - Get Asset" sap:VirtualizedContainerService.HintSize="200,22.4" sap2010:WorkflowViewState.IdRef="GetRobotAsset_6">
        <ui:GetRobotAsset.Value>
          <OutArgument x:TypeArguments="x:Boolean">[clientRobotStatusToggle]</OutArgument>
        </ui:GetRobotAsset.Value>
      </ui:GetRobotAsset>
      <ui:GetRobotAsset TimeoutMS="{x:Null}" AssetName="Common_TemporaryEnvironmentName" DisplayName="Common_TemporaryEnvironmentName - Get Asset" sap:VirtualizedContainerService.HintSize="200,22.4" sap2010:WorkflowViewState.IdRef="GetRobotAsset_7">
        <ui:GetRobotAsset.Value>
          <OutArgument x:TypeArguments="x:String">[clientTempEnvName]</OutArgument>
        </ui:GetRobotAsset.Value>
      </ui:GetRobotAsset>
    </Sequence>
    <If Condition="[SpecifiedClientId &lt; 0]" DisplayName="If Mode = Events (not Pooling)" sap:VirtualizedContainerService.HintSize="1513.6,52.8" sap2010:WorkflowViewState.IdRef="If_12">
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsExpanded">False</x:Boolean>
          <x:Boolean x:Key="IsPinned">True</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
      <If.Then>
        <Sequence sap:VirtualizedContainerService.HintSize="752.8,1231.2" sap2010:WorkflowViewState.IdRef="Sequence_33">
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <Sequence DisplayName="Get Events for a Tenant" sap:VirtualizedContainerService.HintSize="711.2,856" sap2010:WorkflowViewState.IdRef="Sequence_3">
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                <x:Boolean x:Key="IsPinned">False</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
            <Sequence DisplayName="Get All New Queue Items" sap:VirtualizedContainerService.HintSize="524.8,670.4" sap2010:WorkflowViewState.IdRef="Sequence_15">
              <Sequence.Variables>
                <Variable x:TypeArguments="x:Int32" Name="skipQueueItems" />
                <Variable x:TypeArguments="scg:IEnumerable(ui:QueueItem)" Default="[{}]" Name="tempQueueItems" />
              </Sequence.Variables>
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                  <x:Boolean x:Key="IsPinned">False</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
              <Assign sap:VirtualizedContainerService.HintSize="483.2,60" sap2010:WorkflowViewState.IdRef="Assign_2">
                <Assign.To>
                  <OutArgument x:TypeArguments="x:Int32">[skipQueueItems]</OutArgument>
                </Assign.To>
                <Assign.Value>
                  <InArgument x:TypeArguments="x:Int32">0</InArgument>
                </Assign.Value>
              </Assign>
              <DoWhile DisplayName="Do While" sap:VirtualizedContainerService.HintSize="483.2,477.6" sap2010:WorkflowViewState.IdRef="DoWhile_1">
                <sap:WorkflowViewStateService.ViewState>
                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                    <x:Boolean x:Key="IsPinned">False</x:Boolean>
                  </scg:Dictionary>
                </sap:WorkflowViewStateService.ViewState>
                <DoWhile.Condition>[tempQueueItems.Count() &gt; 0]</DoWhile.Condition>
                <Sequence sap:VirtualizedContainerService.HintSize="304,315.2" sap2010:WorkflowViewState.IdRef="Sequence_14">
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                      <x:Boolean x:Key="IsPinned">False</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                  <ui:GetQueueItems Duration="{x:Null}" From="{x:Null}" Priority="{x:Null}" Reference="{x:Null}" TimeoutMS="{x:Null}" To="{x:Null}" DisplayName="Get New Queue Items" FilterStrategy="StartsWith" FolderPath="[AdminTenantFolder]" sap:VirtualizedContainerService.HintSize="262.4,22.4" sap2010:WorkflowViewState.IdRef="GetQueueItems_2" QueueItemStates="New" QueueName="[QueueName]" Result="[tempQueueItems]" Skip="[skipQueueItems]" Top="100" />
                  <Assign sap:VirtualizedContainerService.HintSize="262.4,60" sap2010:WorkflowViewState.IdRef="Assign_9">
                    <Assign.To>
                      <OutArgument x:TypeArguments="scg:IEnumerable(ui:QueueItem)">[QueueItems]</OutArgument>
                    </Assign.To>
                    <Assign.Value>
                      <InArgument x:TypeArguments="scg:IEnumerable(ui:QueueItem)">[tempQueueItems.Concat(QueueItems).ToArray()]</InArgument>
                    </Assign.Value>
                  </Assign>
                  <Assign sap:VirtualizedContainerService.HintSize="262.4,60" sap2010:WorkflowViewState.IdRef="Assign_10">
                    <Assign.To>
                      <OutArgument x:TypeArguments="x:Int32">[skipQueueItems]</OutArgument>
                    </Assign.To>
                    <Assign.Value>
                      <InArgument x:TypeArguments="x:Int32">[skipQueueItems + tempQueueItems.Count()]</InArgument>
                    </Assign.Value>
                  </Assign>
                </Sequence>
              </DoWhile>
            </Sequence>
            <If Condition="[QueueItems.Count &gt; 0]" DisplayName="If New Queue Items" sap:VirtualizedContainerService.HintSize="524.8,52.8" sap2010:WorkflowViewState.IdRef="If_4">
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                  <x:Boolean x:Key="IsPinned">True</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
              <If.Then>
                <Sequence DisplayName="Filter Sequence" sap:VirtualizedContainerService.HintSize="944.8,2167.2" sap2010:WorkflowViewState.IdRef="Sequence_17">
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                  <ui:GetQueueItem ContinueOnError="{x:Null}" TimeoutMS="{x:Null}" DisplayName="Get Transaction Item" FolderPath="[AdminTenantFolder]" sap:VirtualizedContainerService.HintSize="903.2,22.4" sap2010:WorkflowViewState.IdRef="GetQueueItem_3" QueueType="[QueueName]" TransactionItem="[QueueItem]" />
                  <ui:MultipleAssign DisplayName="Multiple Assign" sap:VirtualizedContainerService.HintSize="903.2,192.8" sap2010:WorkflowViewState.IdRef="MultipleAssign_5">
                    <ui:MultipleAssign.AssignOperations>
                      <scg:List x:TypeArguments="ui:AssignOperation" Capacity="8">
                        <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_12">
                          <ui:AssignOperation.To>
                            <OutArgument x:TypeArguments="x:String">[clientTenantId]</OutArgument>
                          </ui:AssignOperation.To>
                          <ui:AssignOperation.Value>
                            <InArgument x:TypeArguments="x:String">[QueueItem.SpecificContent("TenantId").ToString()]</InArgument>
                          </ui:AssignOperation.Value>
                        </ui:AssignOperation>
                        <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_13">
                          <ui:AssignOperation.To>
                            <OutArgument x:TypeArguments="x:String">[clientFolderId]</OutArgument>
                          </ui:AssignOperation.To>
                          <ui:AssignOperation.Value>
                            <InArgument x:TypeArguments="x:String">[QueueItem.SpecificContent("OrganizationUnitId").ToString()]</InArgument>
                          </ui:AssignOperation.Value>
                        </ui:AssignOperation>
                        <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_16">
                          <ui:AssignOperation.To>
                            <OutArgument x:TypeArguments="x:Int32">[clientEventsForStartRobots]</OutArgument>
                          </ui:AssignOperation.To>
                          <ui:AssignOperation.Value>
                            <InArgument x:TypeArguments="x:Int32">0</InArgument>
                          </ui:AssignOperation.Value>
                        </ui:AssignOperation>
                        <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_17">
                          <ui:AssignOperation.To>
                            <OutArgument x:TypeArguments="x:Int32">[clientEventsForStopRobots]</OutArgument>
                          </ui:AssignOperation.To>
                          <ui:AssignOperation.Value>
                            <InArgument x:TypeArguments="x:Int32">0</InArgument>
                          </ui:AssignOperation.Value>
                        </ui:AssignOperation>
                      </scg:List>
                    </ui:MultipleAssign.AssignOperations>
                  </ui:MultipleAssign>
                  <If Condition="[clientEnvironmentLevelCounters]" DisplayName="If EnvironmentLevelCounters" sap:VirtualizedContainerService.HintSize="903.2,1584" sap2010:WorkflowViewState.IdRef="If_9">
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                        <x:Boolean x:Key="IsPinned">False</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                    <If.Else>
                      <ui:ForEach x:TypeArguments="ui:QueueItem" CurrentIndex="{x:Null}" DisplayName="Filter Tid Fid ForEach" sap:VirtualizedContainerService.HintSize="759.2,1434.4" sap2010:WorkflowViewState.IdRef="ForEach`1_4" Values="[QueueItems]">
                        <ui:ForEach.Body>
                          <ActivityAction x:TypeArguments="ui:QueueItem">
                            <ActivityAction.Argument>
                              <DelegateInArgument x:TypeArguments="ui:QueueItem" Name="item" />
                            </ActivityAction.Argument>
                            <Sequence DisplayName="Body" sap:VirtualizedContainerService.HintSize="724,1300" sap2010:WorkflowViewState.IdRef="Sequence_20">
                              <Sequence.Variables>
                                <Variable x:TypeArguments="x:Boolean" Name="filterEventsCondition" />
                              </Sequence.Variables>
                              <sap:WorkflowViewStateService.ViewState>
                                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                  <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                </scg:Dictionary>
                              </sap:WorkflowViewStateService.ViewState>
                              <Assign sap:VirtualizedContainerService.HintSize="682.4,60" sap2010:WorkflowViewState.IdRef="Assign_16">
                                <Assign.To>
                                  <OutArgument x:TypeArguments="x:Boolean">[filterEventsCondition]</OutArgument>
                                </Assign.To>
                                <Assign.Value>
                                  <InArgument x:TypeArguments="x:Boolean">[item.SpecificContent("TenantId").ToString.Equals(QueueItem.SpecificContent("TenantId").ToString()) And item.SpecificContent("OrganizationUnitId").ToString.Equals(QueueItem.SpecificContent("OrganizationUnitId").ToString)]</InArgument>
                                </Assign.Value>
                              </Assign>
                              <If Condition="[filterEventsCondition]" DisplayName="If Tid Fid match with 1st event" sap:VirtualizedContainerService.HintSize="682.4,1107.2" sap2010:WorkflowViewState.IdRef="If_6">
                                <sap:WorkflowViewStateService.ViewState>
                                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                    <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                  </scg:Dictionary>
                                </sap:WorkflowViewStateService.ViewState>
                                <If.Then>
                                  <Sequence sap:VirtualizedContainerService.HintSize="538.4,957.6" sap2010:WorkflowViewState.IdRef="Sequence_22">
                                    <sap:WorkflowViewStateService.ViewState>
                                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                        <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                      </scg:Dictionary>
                                    </sap:WorkflowViewStateService.ViewState>
                                    <ui:GetQueueItem ContinueOnError="{x:Null}" TimeoutMS="{x:Null}" TransactionItem="{x:Null}" DisplayName="Get Transaction Item" FolderPath="[AdminTenantFolder]" sap:VirtualizedContainerService.HintSize="496.8,22.4" sap2010:WorkflowViewState.IdRef="GetQueueItem_4" QueueType="[QueueName]" Reference="[item.Reference]" />
                                    <Switch x:TypeArguments="x:String" DisplayName="Switch Count Event Type" Expression="[item.SpecificContent(&quot;DataType&quot;).ToString]" sap:VirtualizedContainerService.HintSize="496.8,740" sap2010:WorkflowViewState.IdRef="Switch`1_3">
                                      <sap:WorkflowViewStateService.ViewState>
                                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                          <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                        </scg:Dictionary>
                                      </sap:WorkflowViewStateService.ViewState>
                                      <Assign x:Key="job.created" sap:VirtualizedContainerService.HintSize="262.4,60" sap2010:WorkflowViewState.IdRef="Assign_5">
                                        <Assign.To>
                                          <OutArgument x:TypeArguments="x:Int32">[clientEventsForStartRobots]</OutArgument>
                                        </Assign.To>
                                        <Assign.Value>
                                          <InArgument x:TypeArguments="x:Int32">[clientEventsForStartRobots+1]</InArgument>
                                        </Assign.Value>
                                      </Assign>
                                      <Assign x:Key="job.faulted" sap:VirtualizedContainerService.HintSize="262.4,60" sap2010:WorkflowViewState.IdRef="Assign_6">
                                        <Assign.To>
                                          <OutArgument x:TypeArguments="x:Int32">[clientEventsForStopRobots]</OutArgument>
                                        </Assign.To>
                                        <Assign.Value>
                                          <InArgument x:TypeArguments="x:Int32">[clientEventsForStopRobots+1]</InArgument>
                                        </Assign.Value>
                                      </Assign>
                                      <Assign x:Key="job.completed" sap:VirtualizedContainerService.HintSize="262.4,60" sap2010:WorkflowViewState.IdRef="Assign_7">
                                        <Assign.To>
                                          <OutArgument x:TypeArguments="x:Int32">[clientEventsForStopRobots]</OutArgument>
                                        </Assign.To>
                                        <Assign.Value>
                                          <InArgument x:TypeArguments="x:Int32">[clientEventsForStopRobots+1]</InArgument>
                                        </Assign.Value>
                                      </Assign>
                                      <Assign x:Key="job.stopped" sap:VirtualizedContainerService.HintSize="262.4,60" sap2010:WorkflowViewState.IdRef="Assign_8">
                                        <Assign.To>
                                          <OutArgument x:TypeArguments="x:Int32">[clientEventsForStopRobots]</OutArgument>
                                        </Assign.To>
                                        <Assign.Value>
                                          <InArgument x:TypeArguments="x:Int32">[clientEventsForStopRobots+1]</InArgument>
                                        </Assign.Value>
                                      </Assign>
                                    </Switch>
                                    <ui:SetTransactionStatus Reason="{x:Null}" ServiceBaseAddress="{x:Null}" TimeoutMS="{x:Null}" ContinueOnError="True" DisplayName="Private: Success - Set Transaction Status" ErrorType="Business" FolderPath="[AdminTenantFolder]" sap:VirtualizedContainerService.HintSize="496.8,22.4" sap2010:WorkflowViewState.IdRef="SetTransactionStatus_2" Status="Successful" TransactionItem="[item]">
                                      <ui:SetTransactionStatus.Analytics>
                                        <scg:Dictionary x:TypeArguments="x:String, InArgument" />
                                      </ui:SetTransactionStatus.Analytics>
                                      <ui:SetTransactionStatus.Output>
                                        <scg:Dictionary x:TypeArguments="x:String, InArgument" />
                                      </ui:SetTransactionStatus.Output>
                                    </ui:SetTransactionStatus>
                                  </Sequence>
                                </If.Then>
                              </If>
                            </Sequence>
                          </ActivityAction>
                        </ui:ForEach.Body>
                        <sap:WorkflowViewStateService.ViewState>
                          <scg:Dictionary x:TypeArguments="x:String, x:Object">
                            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                            <x:Boolean x:Key="IsPinned">False</x:Boolean>
                          </scg:Dictionary>
                        </sap:WorkflowViewStateService.ViewState>
                      </ui:ForEach>
                    </If.Else>
                  </If>
                  <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="903.2,92.8" sap2010:WorkflowViewState.IdRef="LogMessage_2" Level="Info" Message="[&quot;Retrieved events for Tenant &quot; + clientTenantId + &quot; Folder &quot; + clientFolderId]">
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsPinned">False</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                  </ui:LogMessage>
                  <ui:SetTransactionStatus Reason="{x:Null}" ServiceBaseAddress="{x:Null}" TimeoutMS="{x:Null}" ContinueOnError="True" DisplayName="Private: Success - Set Transaction Status" ErrorType="Business" FolderPath="[AdminTenantFolder]" sap:VirtualizedContainerService.HintSize="903.2,22.4" sap2010:WorkflowViewState.IdRef="SetTransactionStatus_4" Status="Successful" TransactionItem="[QueueItem]">
                    <ui:SetTransactionStatus.Analytics>
                      <scg:Dictionary x:TypeArguments="x:String, InArgument" />
                    </ui:SetTransactionStatus.Analytics>
                    <ui:SetTransactionStatus.Output>
                      <scg:Dictionary x:TypeArguments="x:String, InArgument" />
                    </ui:SetTransactionStatus.Output>
                  </ui:SetTransactionStatus>
                </Sequence>
              </If.Then>
              <If.Else>
                <Sequence DisplayName="No New Queue Items Else Sequence" sap:VirtualizedContainerService.HintSize="375.2,285.6" sap2010:WorkflowViewState.IdRef="Sequence_19">
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                      <x:Boolean x:Key="IsPinned">False</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                  <Assign sap:VirtualizedContainerService.HintSize="333.6,60" sap2010:WorkflowViewState.IdRef="Assign_1">
                    <Assign.To>
                      <OutArgument x:TypeArguments="x:String">[clientTenantId]</OutArgument>
                    </Assign.To>
                    <Assign.Value>
                      <InArgument x:TypeArguments="x:String">[Nothing]</InArgument>
                    </Assign.Value>
                  </Assign>
                  <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="333.6,92.8" sap2010:WorkflowViewState.IdRef="LogMessage_8" Level="Info" Message="[&quot;All events are already processed.&quot;]">
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsPinned">False</x:Boolean>
                        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                  </ui:LogMessage>
                </Sequence>
              </If.Else>
            </If>
          </Sequence>
          <If Condition="[clientTenantId IsNot Nothing]" DisplayName="If Client Found" sap:VirtualizedContainerService.HintSize="711.2,242.4" sap2010:WorkflowViewState.IdRef="If_13">
            <If.Then>
              <ui:InvokeWorkflowFile ContinueOnError="{x:Null}" DisplayName="GetAuthInfo - Invoke Workflow File" sap:VirtualizedContainerService.HintSize="333.6,88" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_12" UnSafe="False" WorkflowFileName="OrchestratorTenant_GetDbInfo.xaml">
                <ui:InvokeWorkflowFile.Arguments>
                  <OutArgument x:TypeArguments="x:String" x:Key="VmTemplate">[clientVmTemplate]</OutArgument>
                  <InArgument x:TypeArguments="x:String" x:Key="TenantID">[clientTenantId]</InArgument>
                  <OutArgument x:TypeArguments="x:String" x:Key="Service">[clientService]</OutArgument>
                  <OutArgument x:TypeArguments="x:String" x:Key="TenantLogicalName">[clientLogicalName]</OutArgument>
                  <OutArgument x:TypeArguments="x:String" x:Key="ClientId">[clientId]</OutArgument>
                  <OutArgument x:TypeArguments="x:String" x:Key="ClientSecret">[clientSecret]</OutArgument>
                  <OutArgument x:TypeArguments="x:String" x:Key="Url">[clientUrl]</OutArgument>
                  <OutArgument x:TypeArguments="x:String" x:Key="Infrastructure">[clientInfrastructure]</OutArgument>
                  <OutArgument x:TypeArguments="x:String" x:Key="OrchestratorEnv">[clientEnvironment]</OutArgument>
                  <OutArgument x:TypeArguments="x:String" x:Key="OrchestratorFolder">[clientFolderName]</OutArgument>
                  <OutArgument x:TypeArguments="x:String" x:Key="UrlAuth">[clientUrlAuth]</OutArgument>
                  <InArgument x:TypeArguments="x:String" x:Key="TenantsDbConnectionString">[TenantsDbConnectionString]</InArgument>
                  <OutArgument x:TypeArguments="x:Int32" x:Key="RobotsCountHot">[clientRobotsHot]</OutArgument>
                  <OutArgument x:TypeArguments="x:Int32" x:Key="RobotsCountCold">[clientRobotsCold]</OutArgument>
                  <OutArgument x:TypeArguments="x:Int32" x:Key="RobotsCountVirtual">[clientRobotsVirtual]</OutArgument>
                  <OutArgument x:TypeArguments="x:String" x:Key="OrchestratorFolderId">[clientFolderId]</OutArgument>
                  <InArgument x:TypeArguments="x:String" x:Key="FolderID_FromEvent">[QueueItem.SpecificContent("OrganizationUnitId").ToString()]</InArgument>
                  <InArgument x:TypeArguments="x:Boolean" x:Key="clientEnvironmentLevelCounters">[clientEnvironmentLevelCounters]</InArgument>
                  <OutArgument x:TypeArguments="x:String" x:Key="clientEventEnvironmentName">[clientEventEnvironmentName]</OutArgument>
                  <InArgument x:TypeArguments="x:String" x:Key="EventReleaseProcessKey">[QueueItem.SpecificContent("ReleaseProcessKey").ToString()]</InArgument>
                  <InArgument x:TypeArguments="x:String" x:Key="EventReleaseId">[QueueItem.SpecificContent("ReleaseId").ToString()]</InArgument>
                  <InArgument x:TypeArguments="x:Int32" x:Key="SpecifiedClientId">[SpecifiedClientId]</InArgument>
                  <OutArgument x:TypeArguments="x:String" x:Key="clientTenantId">[clientTenantId]</OutArgument>
                </ui:InvokeWorkflowFile.Arguments>
              </ui:InvokeWorkflowFile>
            </If.Then>
            <If.Else>
              <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="333.6,92.8" sap2010:WorkflowViewState.IdRef="LogMessage_10" Level="Info" Message="[&quot;Event's Tenant + Folder not found in managed DB list.&quot;]">
                <sap:WorkflowViewStateService.ViewState>
                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                    <x:Boolean x:Key="IsPinned">False</x:Boolean>
                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                  </scg:Dictionary>
                </sap:WorkflowViewStateService.ViewState>
              </ui:LogMessage>
            </If.Else>
          </If>
        </Sequence>
      </If.Then>
      <If.Else>
        <ui:InvokeWorkflowFile ContinueOnError="{x:Null}" DisplayName="GetAuthInfo - Invoke Workflow File" sap:VirtualizedContainerService.HintSize="333.6,88" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_23" UnSafe="False" WorkflowFileName="OrchestratorTenant_GetDbInfo.xaml">
          <ui:InvokeWorkflowFile.Arguments>
            <OutArgument x:TypeArguments="x:String" x:Key="VmTemplate">[clientVmTemplate]</OutArgument>
            <InArgument x:TypeArguments="x:String" x:Key="TenantID" />
            <OutArgument x:TypeArguments="x:String" x:Key="Service">[clientService]</OutArgument>
            <OutArgument x:TypeArguments="x:String" x:Key="TenantLogicalName">[clientLogicalName]</OutArgument>
            <OutArgument x:TypeArguments="x:String" x:Key="ClientId">[clientId]</OutArgument>
            <OutArgument x:TypeArguments="x:String" x:Key="ClientSecret">[clientSecret]</OutArgument>
            <OutArgument x:TypeArguments="x:String" x:Key="Url">[clientUrl]</OutArgument>
            <OutArgument x:TypeArguments="x:String" x:Key="Infrastructure">[clientInfrastructure]</OutArgument>
            <OutArgument x:TypeArguments="x:String" x:Key="OrchestratorEnv">[clientEnvironment]</OutArgument>
            <OutArgument x:TypeArguments="x:String" x:Key="OrchestratorFolder">[clientFolderName]</OutArgument>
            <OutArgument x:TypeArguments="x:String" x:Key="UrlAuth">[clientUrlAuth]</OutArgument>
            <InArgument x:TypeArguments="x:String" x:Key="TenantsDbConnectionString">[TenantsDbConnectionString]</InArgument>
            <OutArgument x:TypeArguments="x:Int32" x:Key="RobotsCountHot">[clientRobotsHot]</OutArgument>
            <OutArgument x:TypeArguments="x:Int32" x:Key="RobotsCountCold">[clientRobotsCold]</OutArgument>
            <OutArgument x:TypeArguments="x:Int32" x:Key="RobotsCountVirtual">[clientRobotsVirtual]</OutArgument>
            <OutArgument x:TypeArguments="x:String" x:Key="OrchestratorFolderId">[clientFolderId]</OutArgument>
            <InArgument x:TypeArguments="x:String" x:Key="FolderID_FromEvent" />
            <InArgument x:TypeArguments="x:Boolean" x:Key="clientEnvironmentLevelCounters">[clientEnvironmentLevelCounters]</InArgument>
            <OutArgument x:TypeArguments="x:String" x:Key="clientEventEnvironmentName">[clientEventEnvironmentName]</OutArgument>
            <InArgument x:TypeArguments="x:String" x:Key="EventReleaseProcessKey" />
            <InArgument x:TypeArguments="x:String" x:Key="EventReleaseId" />
            <InArgument x:TypeArguments="x:Int32" x:Key="SpecifiedClientId">[SpecifiedClientId]</InArgument>
            <OutArgument x:TypeArguments="x:String" x:Key="clientTenantId">[clientTenantId]</OutArgument>
          </ui:InvokeWorkflowFile.Arguments>
        </ui:InvokeWorkflowFile>
      </If.Else>
    </If>
    <If Condition="[clientTenantId IsNot Nothing]" DisplayName="If Tenant Found" sap:VirtualizedContainerService.HintSize="1513.6,2363.2" sap2010:WorkflowViewState.IdRef="If_5">
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          <x:Boolean x:Key="IsPinned">False</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
      <If.Then>
        <Sequence DisplayName="Check Client Tenant Info - Sequence" sap:VirtualizedContainerService.HintSize="1136,2213.6" sap2010:WorkflowViewState.IdRef="Sequence_8">
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
              <x:Boolean x:Key="IsPinned">False</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <If Condition="[string.IsNullOrWhiteSpace(clientService)]" DisplayName="If client orchestrator is onprem" sap:VirtualizedContainerService.HintSize="1094.4,209.6" sap2010:WorkflowViewState.IdRef="If_8">
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                <x:Boolean x:Key="IsPinned">False</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
            <If.Then>
              <Assign sap:VirtualizedContainerService.HintSize="262.4,60" sap2010:WorkflowViewState.IdRef="Assign_13">
                <Assign.To>
                  <OutArgument x:TypeArguments="x:Boolean">[clientOrchestratorIsOnPrem]</OutArgument>
                </Assign.To>
                <Assign.Value>
                  <InArgument x:TypeArguments="x:Boolean">True</InArgument>
                </Assign.Value>
              </Assign>
            </If.Then>
            <If.Else>
              <Assign sap:VirtualizedContainerService.HintSize="262.4,60" sap2010:WorkflowViewState.IdRef="Assign_14">
                <Assign.To>
                  <OutArgument x:TypeArguments="x:Boolean">[clientOrchestratorIsOnPrem]</OutArgument>
                </Assign.To>
                <Assign.Value>
                  <InArgument x:TypeArguments="x:Boolean">False</InArgument>
                </Assign.Value>
              </Assign>
            </If.Else>
          </If>
          <If Condition="[clientId IsNot Nothing]" DisplayName="If Tenant + Folder in DB" sap:VirtualizedContainerService.HintSize="1094.4,1738.4" sap2010:WorkflowViewState.IdRef="If_7">
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                <x:Boolean x:Key="IsPinned">False</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
            <If.Then>
              <Sequence sap:VirtualizedContainerService.HintSize="716.8,1588.8" sap2010:WorkflowViewState.IdRef="Sequence_23">
                <sap:WorkflowViewStateService.ViewState>
                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                  </scg:Dictionary>
                </sap:WorkflowViewStateService.ViewState>
                <ui:InvokeWorkflowFile ContinueOnError="{x:Null}" DisplayName="GetAuthToken - Invoke Workflow File" sap:VirtualizedContainerService.HintSize="675.2,88" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_2" UnSafe="False" WorkflowFileName="OrchestratorTenant_GetAuthToken.xaml">
                  <ui:InvokeWorkflowFile.Arguments>
                    <InArgument x:TypeArguments="x:String" x:Key="ClientId">[clientId]</InArgument>
                    <InArgument x:TypeArguments="x:String" x:Key="ClientSecret">[clientSecret]</InArgument>
                    <InArgument x:TypeArguments="x:String" x:Key="TenantLogicalName">[clientLogicalName]</InArgument>
                    <InArgument x:TypeArguments="x:String" x:Key="TenantService">[clientService]</InArgument>
                    <InArgument x:TypeArguments="x:String" x:Key="AuthUrl">[clientUrlAuth]</InArgument>
                    <OutArgument x:TypeArguments="x:String" x:Key="Token">[clientToken]</OutArgument>
                    <InArgument x:TypeArguments="x:Boolean" x:Key="clientOrchestratorIsOnPrem">[clientOrchestratorIsOnPrem]</InArgument>
                  </ui:InvokeWorkflowFile.Arguments>
                </ui:InvokeWorkflowFile>
                <If sap2010:Annotation.AnnotationText="update current new queue items event status only for the ones that belong to the same orchestrator environment as the 1st retrieved item" Condition="[clientEnvironmentLevelCounters And (SpecifiedClientId &lt; 0)]" DisplayName="If EnvironmentLevelCounters" sap:VirtualizedContainerService.HintSize="675.2,144.8" sap2010:WorkflowViewState.IdRef="If_11">
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                      <x:Boolean x:Key="IsPinned">True</x:Boolean>
                      <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                  <If.Then>
                    <Sequence sap:VirtualizedContainerService.HintSize="403.2,273.6" sap2010:WorkflowViewState.IdRef="Sequence_32">
                      <sap:WorkflowViewStateService.ViewState>
                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                        </scg:Dictionary>
                      </sap:WorkflowViewStateService.ViewState>
                      <ui:InvokeWorkflowFile ContinueOnError="{x:Null}" DisplayName="Invoke OrchestratorTenant_GetReleasesForEnvironment workflow" sap:VirtualizedContainerService.HintSize="361.6,88" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_22" UnSafe="False" WorkflowFileName="OrchestratorTenant_GetReleasesForEnvironment.xaml">
                        <ui:InvokeWorkflowFile.Arguments>
                          <InArgument x:TypeArguments="x:String" x:Key="Token">[clientToken]</InArgument>
                          <InArgument x:TypeArguments="x:String" x:Key="TenantLogicalName">[clientLogicalName]</InArgument>
                          <InArgument x:TypeArguments="x:String" x:Key="TenantService">[clientService]</InArgument>
                          <InArgument x:TypeArguments="x:String" x:Key="Url">[clientUrl]</InArgument>
                          <InArgument x:TypeArguments="x:String" x:Key="EnvironmentName">[clientEnvironment]</InArgument>
                          <InArgument x:TypeArguments="x:String" x:Key="TenantFolderId">[clientFolderId]</InArgument>
                          <InArgument x:TypeArguments="x:Boolean" x:Key="clientOrchestratorIsOnprem">[clientOrchestratorIsOnPrem]</InArgument>
                          <OutArgument x:TypeArguments="scg:List(x:String)" x:Key="EnvironmentReleases">[clientEnvironmentReleasesList]</OutArgument>
                          <OutArgument x:TypeArguments="scg:List(x:String)" x:Key="EnvironmentReleasesIDs">[clientEnvironmentReleasesIDsList]</OutArgument>
                        </ui:InvokeWorkflowFile.Arguments>
                      </ui:InvokeWorkflowFile>
                      <ui:ForEach x:TypeArguments="ui:QueueItem" CurrentIndex="{x:Null}" DisplayName="Filter Tid Fid ForEach" sap:VirtualizedContainerService.HintSize="361.6,52.8" sap2010:WorkflowViewState.IdRef="ForEach`1_5" Values="[QueueItems]">
                        <ui:ForEach.Body>
                          <ActivityAction x:TypeArguments="ui:QueueItem">
                            <ActivityAction.Argument>
                              <DelegateInArgument x:TypeArguments="ui:QueueItem" Name="item" />
                            </ActivityAction.Argument>
                            <Sequence DisplayName="Body" sap:VirtualizedContainerService.HintSize="724,1300" sap2010:WorkflowViewState.IdRef="Sequence_31">
                              <Sequence.Variables>
                                <Variable x:TypeArguments="x:Boolean" Name="filterEventsCondition" />
                                <Variable x:TypeArguments="x:String" Name="queueItemEnvironmentName" />
                              </Sequence.Variables>
                              <sap:WorkflowViewStateService.ViewState>
                                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                  <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                </scg:Dictionary>
                              </sap:WorkflowViewStateService.ViewState>
                              <Assign sap:VirtualizedContainerService.HintSize="682.4,60" sap2010:WorkflowViewState.IdRef="Assign_17">
                                <Assign.To>
                                  <OutArgument x:TypeArguments="x:Boolean">[filterEventsCondition]</OutArgument>
                                </Assign.To>
                                <Assign.Value>
                                  <InArgument x:TypeArguments="x:Boolean">[item.SpecificContent("TenantId").ToString.Equals(QueueItem.SpecificContent("TenantId").ToString()) And item.SpecificContent("OrganizationUnitId").ToString.Equals(QueueItem.SpecificContent("OrganizationUnitId").ToString)]</InArgument>
                                </Assign.Value>
                              </Assign>
                              <If Condition="[filterEventsCondition And (clientEnvironmentReleasesIDsList.Contains(item.SpecificContent(&quot;ReleaseId&quot;).ToString))]" DisplayName="If Tid Fid match with 1st event" sap:VirtualizedContainerService.HintSize="682.4,1107.2" sap2010:WorkflowViewState.IdRef="If_10">
                                <sap:WorkflowViewStateService.ViewState>
                                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                    <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                  </scg:Dictionary>
                                </sap:WorkflowViewStateService.ViewState>
                                <If.Then>
                                  <Sequence sap:VirtualizedContainerService.HintSize="538.4,957.6" sap2010:WorkflowViewState.IdRef="Sequence_30">
                                    <sap:WorkflowViewStateService.ViewState>
                                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                        <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                      </scg:Dictionary>
                                    </sap:WorkflowViewStateService.ViewState>
                                    <ui:GetQueueItem ContinueOnError="{x:Null}" TimeoutMS="{x:Null}" TransactionItem="{x:Null}" DisplayName="Get Transaction Item" FolderPath="[AdminTenantFolder]" sap:VirtualizedContainerService.HintSize="496.8,22.4" sap2010:WorkflowViewState.IdRef="GetQueueItem_5" QueueType="[QueueName]" Reference="[item.Reference]" />
                                    <Switch x:TypeArguments="x:String" DisplayName="Switch Count Event Type" Expression="[item.SpecificContent(&quot;DataType&quot;).ToString]" sap:VirtualizedContainerService.HintSize="496.8,740" sap2010:WorkflowViewState.IdRef="Switch`1_4">
                                      <sap:WorkflowViewStateService.ViewState>
                                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                          <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                        </scg:Dictionary>
                                      </sap:WorkflowViewStateService.ViewState>
                                      <Assign x:Key="job.created" sap:VirtualizedContainerService.HintSize="262.4,60" sap2010:WorkflowViewState.IdRef="Assign_18">
                                        <Assign.To>
                                          <OutArgument x:TypeArguments="x:Int32">[clientEventsForStartRobots]</OutArgument>
                                        </Assign.To>
                                        <Assign.Value>
                                          <InArgument x:TypeArguments="x:Int32">[clientEventsForStartRobots+1]</InArgument>
                                        </Assign.Value>
                                      </Assign>
                                      <Assign x:Key="job.faulted" sap:VirtualizedContainerService.HintSize="262.4,60" sap2010:WorkflowViewState.IdRef="Assign_19">
                                        <Assign.To>
                                          <OutArgument x:TypeArguments="x:Int32">[clientEventsForStopRobots]</OutArgument>
                                        </Assign.To>
                                        <Assign.Value>
                                          <InArgument x:TypeArguments="x:Int32">[clientEventsForStopRobots+1]</InArgument>
                                        </Assign.Value>
                                      </Assign>
                                      <Assign x:Key="job.completed" sap:VirtualizedContainerService.HintSize="262.4,60" sap2010:WorkflowViewState.IdRef="Assign_20">
                                        <Assign.To>
                                          <OutArgument x:TypeArguments="x:Int32">[clientEventsForStopRobots]</OutArgument>
                                        </Assign.To>
                                        <Assign.Value>
                                          <InArgument x:TypeArguments="x:Int32">[clientEventsForStopRobots+1]</InArgument>
                                        </Assign.Value>
                                      </Assign>
                                      <Assign x:Key="job.stopped" sap:VirtualizedContainerService.HintSize="262.4,60" sap2010:WorkflowViewState.IdRef="Assign_21">
                                        <Assign.To>
                                          <OutArgument x:TypeArguments="x:Int32">[clientEventsForStopRobots]</OutArgument>
                                        </Assign.To>
                                        <Assign.Value>
                                          <InArgument x:TypeArguments="x:Int32">[clientEventsForStopRobots+1]</InArgument>
                                        </Assign.Value>
                                      </Assign>
                                    </Switch>
                                    <ui:SetTransactionStatus Reason="{x:Null}" ServiceBaseAddress="{x:Null}" TimeoutMS="{x:Null}" ContinueOnError="True" DisplayName="Private: Success - Set Transaction Status" ErrorType="Business" FolderPath="[AdminTenantFolder]" sap:VirtualizedContainerService.HintSize="496.8,22.4" sap2010:WorkflowViewState.IdRef="SetTransactionStatus_3" Status="Successful" TransactionItem="[item]">
                                      <ui:SetTransactionStatus.Analytics>
                                        <scg:Dictionary x:TypeArguments="x:String, InArgument" />
                                      </ui:SetTransactionStatus.Analytics>
                                      <ui:SetTransactionStatus.Output>
                                        <scg:Dictionary x:TypeArguments="x:String, InArgument" />
                                      </ui:SetTransactionStatus.Output>
                                    </ui:SetTransactionStatus>
                                  </Sequence>
                                </If.Then>
                              </If>
                            </Sequence>
                          </ActivityAction>
                        </ui:ForEach.Body>
                        <sap:WorkflowViewStateService.ViewState>
                          <scg:Dictionary x:TypeArguments="x:String, x:Object">
                            <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                            <x:Boolean x:Key="IsPinned">True</x:Boolean>
                          </scg:Dictionary>
                        </sap:WorkflowViewStateService.ViewState>
                      </ui:ForEach>
                    </Sequence>
                  </If.Then>
                </If>
                <Sequence DisplayName="Proccess Event - Sequence" sap:VirtualizedContainerService.HintSize="675.2,1183.2" sap2010:WorkflowViewState.IdRef="Sequence_4">
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                      <x:Boolean x:Key="IsPinned">False</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                  <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="633.6,92.8" sap2010:WorkflowViewState.IdRef="LogMessage_6" Level="Info" Message="[&quot;Folder (&quot; + clientFolderName + &quot; &quot;+clientFolderId.ToString+&quot;)  --- Environment (&quot; + clientEnvironment + &quot;) ---  Client Infrastructure (&quot;+clientInfrastructure+&quot;)&quot;]">
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsPinned">False</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                  </ui:LogMessage>
                  <Sequence DisplayName="Get Tenant Service State - Sequence" sap:VirtualizedContainerService.HintSize="633.6,180.8" sap2010:WorkflowViewState.IdRef="Sequence_12">
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                    <ui:InvokeWorkflowFile ContinueOnError="{x:Null}" DisplayName="GetTenantState - Invoke Workflow File" sap:VirtualizedContainerService.HintSize="333.6,88" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_3" UnSafe="False" WorkflowFileName="OrchestratorTenant_GetState.xaml">
                      <ui:InvokeWorkflowFile.Arguments>
                        <InArgument x:TypeArguments="x:String" x:Key="Token">[clientToken]</InArgument>
                        <InArgument x:TypeArguments="x:String" x:Key="TenantLogicalName">[clientLogicalName]</InArgument>
                        <InArgument x:TypeArguments="x:String" x:Key="TenantService">[clientService]</InArgument>
                        <InArgument x:TypeArguments="x:String" x:Key="Url">[clientUrl]</InArgument>
                        <OutArgument x:TypeArguments="x:Int32" x:Key="RobotsLicensedUnattended">[clientRobotsLicensedUnattended]</OutArgument>
                        <OutArgument x:TypeArguments="x:Int32" x:Key="RobotsLicensedAttended">[clientRobotsLicensedAttended]</OutArgument>
                        <OutArgument x:TypeArguments="x:Int32" x:Key="RobotsUsedUnattended">[clientRobotsUsedUnattended]</OutArgument>
                        <OutArgument x:TypeArguments="x:Int32" x:Key="RobotsUsedAttended">[clientRobotsUsedAttended]</OutArgument>
                        <OutArgument x:TypeArguments="x:Int32" x:Key="JobsPending">[clientJobsPending]</OutArgument>
                        <OutArgument x:TypeArguments="x:Int32" x:Key="RobotsProvisioned">[clientRobotsProvisioned]</OutArgument>
                        <InArgument x:TypeArguments="x:String" x:Key="FolderId">[clientFolderId]</InArgument>
                        <InArgument x:TypeArguments="x:String" x:Key="FolderName">[clientFolderName]</InArgument>
                        <OutArgument x:TypeArguments="scg:List(x:String)" x:Key="specificRobotsMachines">[clientSpecificRobotsForJobs]</OutArgument>
                        <OutArgument x:TypeArguments="scg:List(x:String)" x:Key="unattendedRobotsMachines">[clientUnattendedRobotsMachines]</OutArgument>
                        <InArgument x:TypeArguments="x:Boolean" x:Key="clientOrchestratorIsOnprem">[clientOrchestratorIsOnPrem]</InArgument>
                        <InArgument x:TypeArguments="x:Boolean" x:Key="clientEnvironmentLevelCounters">[clientEnvironmentLevelCounters]</InArgument>
                        <InArgument x:TypeArguments="x:String" x:Key="clientEnvironment">[clientEnvironment]</InArgument>
                        <InArgument x:TypeArguments="x:String" x:Key="RobotsType">[clientRobotsType]</InArgument>
                        <OutArgument x:TypeArguments="scg:List(x:String)" x:Key="clientEnvironmentReleases">[clientEnvironmentReleases]</OutArgument>
                      </ui:InvokeWorkflowFile.Arguments>
                    </ui:InvokeWorkflowFile>
                  </Sequence>
                  <Assign sap:VirtualizedContainerService.HintSize="633.6,60" sap2010:WorkflowViewState.IdRef="Assign_12">
                    <Assign.To>
                      <OutArgument x:TypeArguments="scg:List(x:String)">[processedVMs]</OutArgument>
                    </Assign.To>
                    <Assign.Value>
                      <InArgument x:TypeArguments="scg:List(x:String)">[New List (Of String) From {}]</InArgument>
                    </Assign.Value>
                  </Assign>
                  <Flowchart DisplayName="Scaling Strategy (Allocate On-Demand + Buffer Started VMs) Logic" sap:VirtualizedContainerService.HintSize="633.6,636.8" sap2010:WorkflowViewState.IdRef="Flowchart_1">
                    <Flowchart.Variables>
                      <Variable x:TypeArguments="scg:List(x:String)" Name="clientSelectedVMs" />
                    </Flowchart.Variables>
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                        <x:Boolean x:Key="IsPinned">False</x:Boolean>
                        <av:Point x:Key="ShapeLocation">0,2.4</av:Point>
                        <av:Size x:Key="ShapeSize">60,75.2</av:Size>
                        <av:PointCollection x:Key="ConnectorLocation">60,40 337,40 337,86.4</av:PointCollection>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                    <Flowchart.StartNode>
                      <x:Reference>__ReferenceID5</x:Reference>
                    </Flowchart.StartNode>
                    <FlowStep x:Name="__ReferenceID0">
                      <sap:WorkflowViewStateService.ViewState>
                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                          <av:Point x:Key="ShapeLocation">30,283.6</av:Point>
                          <av:Size x:Key="ShapeSize">200,52.8</av:Size>
                        </scg:Dictionary>
                      </sap:WorkflowViewStateService.ViewState>
                      <ui:ForEach x:TypeArguments="x:String" CurrentIndex="{x:Null}" DisplayName="Allocate selected VMs - ForEach" sap:VirtualizedContainerService.HintSize="200,52.8" sap2010:WorkflowViewState.IdRef="ForEach`1_1" Values="[clientSelectedVMs]">
                        <ui:ForEach.Body>
                          <ActivityAction x:TypeArguments="x:String">
                            <ActivityAction.Argument>
                              <DelegateInArgument x:TypeArguments="x:String" Name="vmName" />
                            </ActivityAction.Argument>
                            <Sequence DisplayName="Body" sap:VirtualizedContainerService.HintSize="538.4,944.8" sap2010:WorkflowViewState.IdRef="Sequence_10">
                              <sap:WorkflowViewStateService.ViewState>
                                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                  <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                </scg:Dictionary>
                              </sap:WorkflowViewStateService.ViewState>
                              <Switch x:TypeArguments="x:String" DisplayName="Infra Type - Switch" Expression="[clientInfrastructure]" sap:VirtualizedContainerService.HintSize="496.8,852" sap2010:WorkflowViewState.IdRef="Switch`1_1">
                                <sap:WorkflowViewStateService.ViewState>
                                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                    <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                  </scg:Dictionary>
                                </sap:WorkflowViewStateService.ViewState>
                                <ui:InvokeWorkflowFile ContinueOnError="{x:Null}" x:Key="azure" DisplayName="Allocate VM - Invoke Workflow File" sap:VirtualizedContainerService.HintSize="333.6,88" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_10" UnSafe="False" WorkflowFileName="Infrastructure/Azure/Azure_VM_StartStop.xaml">
                                  <ui:InvokeWorkflowFile.Arguments>
                                    <InArgument x:TypeArguments="x:String" x:Key="Action_StartStopDeallocateDelete">start</InArgument>
                                    <InArgument x:TypeArguments="x:String" x:Key="VM_Name">[vmName]</InArgument>
                                    <InArgument x:TypeArguments="x:String" x:Key="Token">[clientToken]</InArgument>
                                    <InArgument x:TypeArguments="x:String" x:Key="TenantLogicalName">[clientLogicalName]</InArgument>
                                    <InArgument x:TypeArguments="x:String" x:Key="TenantService">[clientService]</InArgument>
                                    <InArgument x:TypeArguments="x:String" x:Key="Url">[clientUrl]</InArgument>
                                    <InArgument x:TypeArguments="x:Boolean" x:Key="clientOrchestratorIsOnprem">[clientOrchestratorIsOnPrem]</InArgument>
                                    <InArgument x:TypeArguments="x:String" x:Key="FolderId">[clientFolderId]</InArgument>
                                    <InArgument x:TypeArguments="x:Boolean" x:Key="clientEnvironmentLevelCounters">[clientEnvironmentLevelCounters]</InArgument>
                                    <InArgument x:TypeArguments="scg:List(x:String)" x:Key="clientEnvironmentReleases">[clientEnvironmentReleases]</InArgument>
                                    <OutArgument x:TypeArguments="scg:List(x:String)" x:Key="specificRobotsMachines" />
                                    <InArgument x:TypeArguments="scg:List(x:String)" x:Key="unattendedRobotsMachines">[clientUnattendedRobotsMachines]</InArgument>
                                  </ui:InvokeWorkflowFile.Arguments>
                                  <sap:WorkflowViewStateService.ViewState>
                                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                    </scg:Dictionary>
                                  </sap:WorkflowViewStateService.ViewState>
                                </ui:InvokeWorkflowFile>
                                <ui:InvokeWorkflowFile ContinueOnError="{x:Null}" x:Key="vmware" DisplayName="Invoke VMware_VM_StartStop workflow" sap:VirtualizedContainerService.HintSize="351.2,88" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_13" UnSafe="False" WorkflowFileName="Infrastructure\VMware\VMware_VM_StartStop.xaml">
                                  <ui:InvokeWorkflowFile.Arguments>
                                    <InArgument x:TypeArguments="x:String" x:Key="VM_Name">[vmName]</InArgument>
                                    <InArgument x:TypeArguments="x:String" x:Key="Action_StartStopDelete">start</InArgument>
                                    <InArgument x:TypeArguments="x:String" x:Key="Token">[clientToken]</InArgument>
                                    <InArgument x:TypeArguments="x:String" x:Key="TenantLogicalName">[clientLogicalName]</InArgument>
                                    <InArgument x:TypeArguments="x:String" x:Key="TenantService">[clientService]</InArgument>
                                    <InArgument x:TypeArguments="x:String" x:Key="Url">[clientUrl]</InArgument>
                                    <InArgument x:TypeArguments="x:Boolean" x:Key="clientOrchestratorIsOnprem">[clientOrchestratorIsOnPrem]</InArgument>
                                    <InArgument x:TypeArguments="x:String" x:Key="FolderId">[clientFolderId]</InArgument>
                                    <InArgument x:TypeArguments="x:Boolean" x:Key="clientEnvironmentLevelCounters">[clientEnvironmentLevelCounters]</InArgument>
                                    <InArgument x:TypeArguments="scg:List(x:String)" x:Key="clientEnvironmentReleases">[clientEnvironmentReleases]</InArgument>
                                    <OutArgument x:TypeArguments="scg:List(x:String)" x:Key="specificRobotsMachines" />
                                    <InArgument x:TypeArguments="scg:List(x:String)" x:Key="unattendedRobotsMachines">[clientUnattendedRobotsMachines]</InArgument>
                                  </ui:InvokeWorkflowFile.Arguments>
                                </ui:InvokeWorkflowFile>
                                <ui:InvokeWorkflowFile ContinueOnError="{x:Null}" x:Key="aws" DisplayName="Invoke AWS_VM_StartStop workflow" sap:VirtualizedContainerService.HintSize="361.6,88" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_15" UnSafe="False" WorkflowFileName="Infrastructure\Amazon AWS\AWS_VM_StartStop.xaml">
                                  <ui:InvokeWorkflowFile.Arguments>
                                    <InArgument x:TypeArguments="x:String" x:Key="VM_Name">[vmName]</InArgument>
                                    <InArgument x:TypeArguments="x:String" x:Key="Action_StartStopDeallocateDelete">start</InArgument>
                                    <InArgument x:TypeArguments="x:String" x:Key="Token">[clientToken]</InArgument>
                                    <InArgument x:TypeArguments="x:String" x:Key="TenantLogicalName">[clientLogicalName]</InArgument>
                                    <InArgument x:TypeArguments="x:String" x:Key="TenantService">[clientService]</InArgument>
                                    <InArgument x:TypeArguments="x:String" x:Key="Url">[clientUrl]</InArgument>
                                    <InArgument x:TypeArguments="x:Boolean" x:Key="clientOrchestratorIsOnprem">[clientOrchestratorIsOnPrem]</InArgument>
                                    <InArgument x:TypeArguments="x:String" x:Key="FolderId">[clientFolderId]</InArgument>
                                    <InArgument x:TypeArguments="x:Boolean" x:Key="clientEnvironmentLevelCounters">[clientEnvironmentLevelCounters]</InArgument>
                                    <InArgument x:TypeArguments="scg:List(x:String)" x:Key="clientEnvironmentReleases">[clientEnvironmentReleases]</InArgument>
                                    <OutArgument x:TypeArguments="scg:List(x:String)" x:Key="specificRobotsMachines" />
                                    <InArgument x:TypeArguments="scg:List(x:String)" x:Key="unattendedRobotsMachines">[clientUnattendedRobotsMachines]</InArgument>
                                  </ui:InvokeWorkflowFile.Arguments>
                                </ui:InvokeWorkflowFile>
                                <ui:InvokeWorkflowFile ContinueOnError="{x:Null}" x:Key="citrix" DisplayName="Invoke Citrix_VM_StartStop workflow" sap:VirtualizedContainerService.HintSize="333.6,88" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_19" UnSafe="False" WorkflowFileName="Infrastructure\Citrix\Citrix_VM_StartStop.xaml">
                                  <ui:InvokeWorkflowFile.Arguments>
                                    <InArgument x:TypeArguments="x:String" x:Key="VM_Name">[vmName]</InArgument>
                                    <InArgument x:TypeArguments="x:String" x:Key="Action_StartStop">start</InArgument>
                                    <InArgument x:TypeArguments="x:String" x:Key="Token">[clientToken]</InArgument>
                                    <InArgument x:TypeArguments="x:String" x:Key="TenantLogicalName">[clientLogicalName]</InArgument>
                                    <InArgument x:TypeArguments="x:String" x:Key="TenantService">[clientService]</InArgument>
                                    <InArgument x:TypeArguments="x:String" x:Key="Url">[clientUrl]</InArgument>
                                    <InArgument x:TypeArguments="x:Boolean" x:Key="clientOrchestratorIsOnprem">[clientOrchestratorIsOnPrem]</InArgument>
                                    <InArgument x:TypeArguments="x:String" x:Key="FolderId">[clientFolderId]</InArgument>
                                    <InArgument x:TypeArguments="x:Boolean" x:Key="clientEnvironmentLevelCounters">[clientEnvironmentLevelCounters]</InArgument>
                                    <InArgument x:TypeArguments="scg:List(x:String)" x:Key="clientEnvironmentReleases">[clientEnvironmentReleases]</InArgument>
                                    <OutArgument x:TypeArguments="scg:List(x:String)" x:Key="specificRobotsMachines" />
                                    <InArgument x:TypeArguments="scg:List(x:String)" x:Key="unattendedRobotsMachines">[clientUnattendedRobotsMachines]</InArgument>
                                  </ui:InvokeWorkflowFile.Arguments>
                                </ui:InvokeWorkflowFile>
                              </Switch>
                            </Sequence>
                          </ActivityAction>
                        </ui:ForEach.Body>
                      </ui:ForEach>
                    </FlowStep>
                    <FlowStep x:Name="__ReferenceID1">
                      <sap:WorkflowViewStateService.ViewState>
                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                          <av:Point x:Key="ShapeLocation">370,393.6</av:Point>
                          <av:Size x:Key="ShapeSize">200,52.8</av:Size>
                          <av:PointCollection x:Key="ConnectorLocation">470,446.4 470,503.6</av:PointCollection>
                        </scg:Dictionary>
                      </sap:WorkflowViewStateService.ViewState>
                      <ui:ForEach x:TypeArguments="x:String" CurrentIndex="{x:Null}" DisplayName="Deallocate selected VMs - For Each" sap:VirtualizedContainerService.HintSize="200,52.8" sap2010:WorkflowViewState.IdRef="ForEach`1_2" Values="[clientSelectedVMs]">
                        <ui:ForEach.Body>
                          <ActivityAction x:TypeArguments="x:String">
                            <ActivityAction.Argument>
                              <DelegateInArgument x:TypeArguments="x:String" Name="vmName" />
                            </ActivityAction.Argument>
                            <Sequence DisplayName="Body" sap:VirtualizedContainerService.HintSize="538.4,944.8" sap2010:WorkflowViewState.IdRef="Sequence_11">
                              <sap:WorkflowViewStateService.ViewState>
                                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                  <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                </scg:Dictionary>
                              </sap:WorkflowViewStateService.ViewState>
                              <Switch x:TypeArguments="x:String" DisplayName="Infra Type - Switch" Expression="[clientInfrastructure]" sap:VirtualizedContainerService.HintSize="496.8,852" sap2010:WorkflowViewState.IdRef="Switch`1_2">
                                <sap:WorkflowViewStateService.ViewState>
                                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                    <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                  </scg:Dictionary>
                                </sap:WorkflowViewStateService.ViewState>
                                <ui:InvokeWorkflowFile ContinueOnError="{x:Null}" x:Key="azure" DisplayName="Deallocate VM - Invoke Workflow File" sap:VirtualizedContainerService.HintSize="333.6,88" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_11" UnSafe="False" WorkflowFileName="Infrastructure/Azure/Azure_VM_StartStop.xaml">
                                  <ui:InvokeWorkflowFile.Arguments>
                                    <InArgument x:TypeArguments="x:String" x:Key="Action_StartStopDeallocateDelete">deallocate</InArgument>
                                    <InArgument x:TypeArguments="x:String" x:Key="VM_Name">[vmName]</InArgument>
                                    <InArgument x:TypeArguments="x:String" x:Key="Token">[clientToken]</InArgument>
                                    <InArgument x:TypeArguments="x:String" x:Key="TenantLogicalName">[clientLogicalName]</InArgument>
                                    <InArgument x:TypeArguments="x:String" x:Key="TenantService">[clientService]</InArgument>
                                    <InArgument x:TypeArguments="x:String" x:Key="Url">[clientUrl]</InArgument>
                                    <InArgument x:TypeArguments="x:Boolean" x:Key="clientOrchestratorIsOnprem">[clientOrchestratorIsOnPrem]</InArgument>
                                    <InArgument x:TypeArguments="x:String" x:Key="FolderId">[clientFolderId]</InArgument>
                                    <InArgument x:TypeArguments="x:Boolean" x:Key="clientEnvironmentLevelCounters">[clientEnvironmentLevelCounters]</InArgument>
                                    <InArgument x:TypeArguments="scg:List(x:String)" x:Key="clientEnvironmentReleases">[clientEnvironmentReleases]</InArgument>
                                    <OutArgument x:TypeArguments="scg:List(x:String)" x:Key="specificRobotsMachines" />
                                    <InArgument x:TypeArguments="scg:List(x:String)" x:Key="unattendedRobotsMachines">[clientUnattendedRobotsMachines]</InArgument>
                                  </ui:InvokeWorkflowFile.Arguments>
                                  <sap:WorkflowViewStateService.ViewState>
                                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                    </scg:Dictionary>
                                  </sap:WorkflowViewStateService.ViewState>
                                </ui:InvokeWorkflowFile>
                                <ui:InvokeWorkflowFile ContinueOnError="{x:Null}" x:Key="vmware" DisplayName="Invoke VMware_VM_StartStop workflow" sap:VirtualizedContainerService.HintSize="351.2,88" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_14" UnSafe="False" WorkflowFileName="Infrastructure\VMware\VMware_VM_StartStop.xaml">
                                  <ui:InvokeWorkflowFile.Arguments>
                                    <InArgument x:TypeArguments="x:String" x:Key="VM_Name">[vmName]</InArgument>
                                    <InArgument x:TypeArguments="x:String" x:Key="Action_StartStopDelete">stop</InArgument>
                                    <InArgument x:TypeArguments="x:String" x:Key="Token">[clientToken]</InArgument>
                                    <InArgument x:TypeArguments="x:String" x:Key="TenantLogicalName">[clientLogicalName]</InArgument>
                                    <InArgument x:TypeArguments="x:String" x:Key="TenantService">[clientService]</InArgument>
                                    <InArgument x:TypeArguments="x:String" x:Key="Url">[clientUrl]</InArgument>
                                    <InArgument x:TypeArguments="x:Boolean" x:Key="clientOrchestratorIsOnprem">[clientOrchestratorIsOnPrem]</InArgument>
                                    <InArgument x:TypeArguments="x:String" x:Key="FolderId">[clientFolderId]</InArgument>
                                    <InArgument x:TypeArguments="x:Boolean" x:Key="clientEnvironmentLevelCounters">[clientEnvironmentLevelCounters]</InArgument>
                                    <InArgument x:TypeArguments="scg:List(x:String)" x:Key="clientEnvironmentReleases">[clientEnvironmentReleases]</InArgument>
                                    <OutArgument x:TypeArguments="scg:List(x:String)" x:Key="specificRobotsMachines" />
                                    <InArgument x:TypeArguments="scg:List(x:String)" x:Key="unattendedRobotsMachines">[clientUnattendedRobotsMachines]</InArgument>
                                  </ui:InvokeWorkflowFile.Arguments>
                                </ui:InvokeWorkflowFile>
                                <ui:InvokeWorkflowFile ContinueOnError="{x:Null}" x:Key="aws" DisplayName="Invoke AWS_VM_StartStop workflow" sap:VirtualizedContainerService.HintSize="361.6,88" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_16" UnSafe="False" WorkflowFileName="Infrastructure\Amazon AWS\AWS_VM_StartStop.xaml">
                                  <ui:InvokeWorkflowFile.Arguments>
                                    <InArgument x:TypeArguments="x:String" x:Key="VM_Name">[vmName]</InArgument>
                                    <InArgument x:TypeArguments="x:String" x:Key="Action_StartStopDeallocateDelete">stop</InArgument>
                                    <InArgument x:TypeArguments="x:String" x:Key="Token">[clientToken]</InArgument>
                                    <InArgument x:TypeArguments="x:String" x:Key="TenantLogicalName">[clientLogicalName]</InArgument>
                                    <InArgument x:TypeArguments="x:String" x:Key="TenantService">[clientService]</InArgument>
                                    <InArgument x:TypeArguments="x:String" x:Key="Url">[clientUrl]</InArgument>
                                    <InArgument x:TypeArguments="x:Boolean" x:Key="clientOrchestratorIsOnprem">[clientOrchestratorIsOnPrem]</InArgument>
                                    <InArgument x:TypeArguments="x:String" x:Key="FolderId">[clientFolderId]</InArgument>
                                    <InArgument x:TypeArguments="x:Boolean" x:Key="clientEnvironmentLevelCounters">[clientEnvironmentLevelCounters]</InArgument>
                                    <InArgument x:TypeArguments="scg:List(x:String)" x:Key="clientEnvironmentReleases">[clientEnvironmentReleases]</InArgument>
                                    <OutArgument x:TypeArguments="scg:List(x:String)" x:Key="specificRobotsMachines" />
                                    <InArgument x:TypeArguments="scg:List(x:String)" x:Key="unattendedRobotsMachines">[clientUnattendedRobotsMachines]</InArgument>
                                  </ui:InvokeWorkflowFile.Arguments>
                                </ui:InvokeWorkflowFile>
                                <ui:InvokeWorkflowFile ContinueOnError="{x:Null}" x:Key="citrix" DisplayName="Invoke Citrix_VM_StartStop workflow" sap:VirtualizedContainerService.HintSize="333.6,88" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_20" UnSafe="False" WorkflowFileName="Infrastructure\Citrix\Citrix_VM_StartStop.xaml">
                                  <ui:InvokeWorkflowFile.Arguments>
                                    <InArgument x:TypeArguments="x:String" x:Key="VM_Name">[vmName]</InArgument>
                                    <InArgument x:TypeArguments="x:String" x:Key="Action_StartStop">stop</InArgument>
                                    <InArgument x:TypeArguments="x:String" x:Key="Token">[clientToken]</InArgument>
                                    <InArgument x:TypeArguments="x:String" x:Key="TenantLogicalName">[clientLogicalName]</InArgument>
                                    <InArgument x:TypeArguments="x:String" x:Key="TenantService">[clientService]</InArgument>
                                    <InArgument x:TypeArguments="x:String" x:Key="Url">[clientUrl]</InArgument>
                                    <InArgument x:TypeArguments="x:Boolean" x:Key="clientOrchestratorIsOnprem">[clientOrchestratorIsOnPrem]</InArgument>
                                    <InArgument x:TypeArguments="x:String" x:Key="FolderId">[clientFolderId]</InArgument>
                                    <InArgument x:TypeArguments="x:Boolean" x:Key="clientEnvironmentLevelCounters">[clientEnvironmentLevelCounters]</InArgument>
                                    <InArgument x:TypeArguments="scg:List(x:String)" x:Key="clientEnvironmentReleases">[clientEnvironmentReleases]</InArgument>
                                    <OutArgument x:TypeArguments="scg:List(x:String)" x:Key="specificRobotsMachines" />
                                    <InArgument x:TypeArguments="scg:List(x:String)" x:Key="unattendedRobotsMachines">[clientUnattendedRobotsMachines]</InArgument>
                                  </ui:InvokeWorkflowFile.Arguments>
                                </ui:InvokeWorkflowFile>
                              </Switch>
                            </Sequence>
                          </ActivityAction>
                        </ui:ForEach.Body>
                      </ui:ForEach>
                      <FlowStep.Next>
                        <FlowStep x:Name="__ReferenceID4">
                          <sap:WorkflowViewStateService.ViewState>
                            <scg:Dictionary x:TypeArguments="x:String, x:Object">
                              <av:Point x:Key="ShapeLocation">370,503.6</av:Point>
                              <av:Size x:Key="ShapeSize">200,52.8</av:Size>
                            </scg:Dictionary>
                          </sap:WorkflowViewStateService.ViewState>
                          <ui:InvokeWorkflowFile ContinueOnError="{x:Null}" DisplayName="Invoke OrchestratorTenant_RobotQuarantineToggle workflow" sap:VirtualizedContainerService.HintSize="200,52.8" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_24" UnSafe="False" WorkflowFileName="RobotQuarantine\OrchestratorTenant_RobotQuarantineToggle.xaml">
                            <ui:InvokeWorkflowFile.Arguments>
                              <InArgument x:TypeArguments="x:String" x:Key="Token">[clientToken]</InArgument>
                              <InArgument x:TypeArguments="x:String" x:Key="TenantLogicalName">[clientLogicalName]</InArgument>
                              <InArgument x:TypeArguments="x:String" x:Key="TenantService">[clientService]</InArgument>
                              <InArgument x:TypeArguments="x:String" x:Key="Url">[clientUrl]</InArgument>
                              <InArgument x:TypeArguments="x:String" x:Key="TenantFolderId">[clientFolderId]</InArgument>
                              <InArgument x:TypeArguments="x:Boolean" x:Key="clientOrchestratorIsOnprem">[clientOrchestratorIsOnprem]</InArgument>
                              <InArgument x:TypeArguments="x:Boolean" x:Key="Quarantine">False</InArgument>
                              <InArgument x:TypeArguments="scg:List(x:String)" x:Key="SelectedMachines">[clientSelectedVMs]</InArgument>
                              <InArgument x:TypeArguments="x:String" x:Key="clientEnvironment">[clientEnvironment]</InArgument>
                              <InArgument x:TypeArguments="x:String" x:Key="TempEnvName">[clientTempEnvName]</InArgument>
                              <InArgument x:TypeArguments="x:Boolean" x:Key="RobotStatusToggle">[clientRobotStatusToggle]</InArgument>
                            </ui:InvokeWorkflowFile.Arguments>
                          </ui:InvokeWorkflowFile>
                        </FlowStep>
                      </FlowStep.Next>
                    </FlowStep>
                    <FlowDecision x:Name="__ReferenceID5" Condition="[clientJobsPending &gt; 0]" DisplayName="JobsPending &gt; 0" sap:VirtualizedContainerService.HintSize="92,87.2" sap2010:WorkflowViewState.IdRef="FlowDecision_3">
                      <sap:WorkflowViewStateService.ViewState>
                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                          <x:Boolean x:Key="IsPinned">False</x:Boolean>
                          <av:Point x:Key="ShapeLocation">314,86.4</av:Point>
                          <av:Size x:Key="ShapeSize">92,87.2</av:Size>
                          <av:PointCollection x:Key="TrueConnector">314,130 130,130 130,165.6</av:PointCollection>
                          <av:PointCollection x:Key="FalseConnector">406,130 470,130 470,275.6</av:PointCollection>
                        </scg:Dictionary>
                      </sap:WorkflowViewStateService.ViewState>
                      <FlowDecision.True>
                        <FlowStep x:Name="__ReferenceID2">
                          <sap:WorkflowViewStateService.ViewState>
                            <scg:Dictionary x:TypeArguments="x:String, x:Object">
                              <av:Point x:Key="ShapeLocation">30,165.6</av:Point>
                              <av:Size x:Key="ShapeSize">200,68.8</av:Size>
                              <av:PointCollection x:Key="ConnectorLocation">130,234.4 130,283.6</av:PointCollection>
                            </scg:Dictionary>
                          </sap:WorkflowViewStateService.ViewState>
                          <Sequence DisplayName="Select Disconnected VMs Sequence" sap:VirtualizedContainerService.HintSize="200,68.8" sap2010:WorkflowViewState.IdRef="Sequence_24">
                            <sap:WorkflowViewStateService.ViewState>
                              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                <x:Boolean x:Key="IsPinned">False</x:Boolean>
                              </scg:Dictionary>
                            </sap:WorkflowViewStateService.ViewState>
                            <ui:InvokeWorkflowFile ContinueOnError="{x:Null}" DisplayName="Select Disconnected VMs - Invoke Workflow" sap:VirtualizedContainerService.HintSize="333.6,88" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_17" UnSafe="False" WorkflowFileName="OrchestratorTenant_SelectRobotVM.xaml">
                              <ui:InvokeWorkflowFile.Arguments>
                                <InArgument x:TypeArguments="x:String" x:Key="State">Disconnected</InArgument>
                                <InArgument x:TypeArguments="x:String" x:Key="Token">[clientToken]</InArgument>
                                <InArgument x:TypeArguments="x:String" x:Key="TenantLogicalName">[clientLogicalName]</InArgument>
                                <InArgument x:TypeArguments="x:String" x:Key="TenantService">[clientService]</InArgument>
                                <InArgument x:TypeArguments="x:String" x:Key="Url">[clientUrl]</InArgument>
                                <InArgument x:TypeArguments="x:String" x:Key="FolderId">[clientFolderId]</InArgument>
                                <OutArgument x:TypeArguments="scg:List(x:String)" x:Key="SelectedVMsList">[clientSelectedVMs]</OutArgument>
                                <InArgument x:TypeArguments="scg:List(x:String)" x:Key="SpecificRobotsForJobs">[clientSpecificRobotsForJobs]</InArgument>
                                <InArgument x:TypeArguments="scg:List(x:String)" x:Key="ProcessedVMs" xml:space="preserve">[New List (Of String) From {  }]</InArgument>
                                <InArgument x:TypeArguments="x:Int32" x:Key="CountPendingJobs">[clientJobsPending]</InArgument>
                                <InArgument x:TypeArguments="x:Int32" x:Key="CountQEventsStart">[clientEventsForStartRobots]</InArgument>
                                <InArgument x:TypeArguments="x:Int32" x:Key="CountQEventsStop">[clientEventsForStopRobots]</InArgument>
                                <InArgument x:TypeArguments="scg:List(x:String)" x:Key="UnattendedRobotsMachines">[clientUnattendedRobotsMachines]</InArgument>
                                <InArgument x:TypeArguments="x:Int32" x:Key="CountRobotMachinesHot">[clientRobotsHot]</InArgument>
                                <InArgument x:TypeArguments="x:Int32" x:Key="CountRobotMachinesCold">[clientRobotsCold]</InArgument>
                                <InArgument x:TypeArguments="x:Int32" x:Key="CountRobotMachinesVirtual">[clientRobotsVirtual]</InArgument>
                                <InArgument x:TypeArguments="x:Boolean" x:Key="clientOrchestratorIsOnprem">[clientOrchestratorIsOnPrem]</InArgument>
                                <InArgument x:TypeArguments="x:Boolean" x:Key="clientRobotStatusToggle">[clientRobotStatusToggle]</InArgument>
                                <InArgument x:TypeArguments="x:String" x:Key="clientTempEnvName">[clientTempEnvName]</InArgument>
                                <InArgument x:TypeArguments="x:String" x:Key="clientEnvironment">[clientEnvironment]</InArgument>
                              </ui:InvokeWorkflowFile.Arguments>
                              <sap:WorkflowViewStateService.ViewState>
                                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                  <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                </scg:Dictionary>
                              </sap:WorkflowViewStateService.ViewState>
                            </ui:InvokeWorkflowFile>
                            <Assign sap:VirtualizedContainerService.HintSize="333.6,60" sap2010:WorkflowViewState.IdRef="Assign_11">
                              <Assign.To>
                                <OutArgument x:TypeArguments="scg:List(x:String)">[processedVMs]</OutArgument>
                              </Assign.To>
                              <Assign.Value>
                                <InArgument x:TypeArguments="scg:List(x:String)">[clientSelectedVMs]</InArgument>
                              </Assign.Value>
                            </Assign>
                          </Sequence>
                          <FlowStep.Next>
                            <x:Reference>__ReferenceID0</x:Reference>
                          </FlowStep.Next>
                        </FlowStep>
                      </FlowDecision.True>
                      <FlowDecision.False>
                        <FlowStep x:Name="__ReferenceID3">
                          <sap:WorkflowViewStateService.ViewState>
                            <scg:Dictionary x:TypeArguments="x:String, x:Object">
                              <av:Point x:Key="ShapeLocation">370,275.6</av:Point>
                              <av:Size x:Key="ShapeSize">200,68.8</av:Size>
                              <av:PointCollection x:Key="ConnectorLocation">470,344.4 470,393.6</av:PointCollection>
                            </scg:Dictionary>
                          </sap:WorkflowViewStateService.ViewState>
                          <Sequence DisplayName="Select Available VMs Sequence" sap:VirtualizedContainerService.HintSize="200,68.8" sap2010:WorkflowViewState.IdRef="Sequence_25">
                            <sap:WorkflowViewStateService.ViewState>
                              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                <x:Boolean x:Key="IsPinned">False</x:Boolean>
                              </scg:Dictionary>
                            </sap:WorkflowViewStateService.ViewState>
                            <ui:InvokeWorkflowFile ContinueOnError="{x:Null}" DisplayName="Select Available VM - Invoke Workflow" sap:VirtualizedContainerService.HintSize="333.6,88" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_18" UnSafe="False" WorkflowFileName="OrchestratorTenant_SelectRobotVM.xaml">
                              <ui:InvokeWorkflowFile.Arguments>
                                <InArgument x:TypeArguments="x:String" x:Key="State">Available</InArgument>
                                <InArgument x:TypeArguments="x:String" x:Key="Token">[clientToken]</InArgument>
                                <InArgument x:TypeArguments="x:String" x:Key="TenantLogicalName">[clientLogicalName]</InArgument>
                                <InArgument x:TypeArguments="x:String" x:Key="TenantService">[clientService]</InArgument>
                                <InArgument x:TypeArguments="x:String" x:Key="Url">[clientUrl]</InArgument>
                                <InArgument x:TypeArguments="x:String" x:Key="FolderId">[clientFolderId]</InArgument>
                                <OutArgument x:TypeArguments="scg:List(x:String)" x:Key="SelectedVMsList">[clientSelectedVMs]</OutArgument>
                                <InArgument x:TypeArguments="scg:List(x:String)" x:Key="SpecificRobotsForJobs">[clientSpecificRobotsForJobs]</InArgument>
                                <InArgument x:TypeArguments="scg:List(x:String)" x:Key="ProcessedVMs">[processedVMs]</InArgument>
                                <InArgument x:TypeArguments="x:Int32" x:Key="CountPendingJobs">[clientJobsPending]</InArgument>
                                <InArgument x:TypeArguments="x:Int32" x:Key="CountQEventsStart">[clientEventsForStartRobots]</InArgument>
                                <InArgument x:TypeArguments="x:Int32" x:Key="CountQEventsStop">[clientEventsForStopRobots]</InArgument>
                                <InArgument x:TypeArguments="scg:List(x:String)" x:Key="UnattendedRobotsMachines">[clientUnattendedRobotsMachines]</InArgument>
                                <InArgument x:TypeArguments="x:Int32" x:Key="CountRobotMachinesHot">[clientRobotsHot]</InArgument>
                                <InArgument x:TypeArguments="x:Int32" x:Key="CountRobotMachinesCold">[clientRobotsCold]</InArgument>
                                <InArgument x:TypeArguments="x:Int32" x:Key="CountRobotMachinesVirtual">[clientRobotsVirtual]</InArgument>
                                <InArgument x:TypeArguments="x:Boolean" x:Key="clientOrchestratorIsOnprem">[clientOrchestratorIsOnPrem]</InArgument>
                                <InArgument x:TypeArguments="x:Boolean" x:Key="clientRobotStatusToggle">[clientRobotStatusToggle]</InArgument>
                                <InArgument x:TypeArguments="x:String" x:Key="clientTempEnvName">[clientTempEnvName]</InArgument>
                                <InArgument x:TypeArguments="x:String" x:Key="clientEnvironment">[clientEnvironment]</InArgument>
                              </ui:InvokeWorkflowFile.Arguments>
                              <sap:WorkflowViewStateService.ViewState>
                                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                  <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                </scg:Dictionary>
                              </sap:WorkflowViewStateService.ViewState>
                            </ui:InvokeWorkflowFile>
                          </Sequence>
                          <FlowStep.Next>
                            <x:Reference>__ReferenceID1</x:Reference>
                          </FlowStep.Next>
                        </FlowStep>
                      </FlowDecision.False>
                    </FlowDecision>
                    <x:Reference>__ReferenceID2</x:Reference>
                    <x:Reference>__ReferenceID3</x:Reference>
                    <x:Reference>__ReferenceID4</x:Reference>
                  </Flowchart>
                </Sequence>
              </Sequence>
            </If.Then>
            <If.Else>
              <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="333.6,92.8" sap2010:WorkflowViewState.IdRef="LogMessage_9" Level="Info" Message="[&quot;Specified Tenant + Folder not found in managed DB list.&quot;]">
                <sap:WorkflowViewStateService.ViewState>
                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                    <x:Boolean x:Key="IsPinned">False</x:Boolean>
                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                  </scg:Dictionary>
                </sap:WorkflowViewStateService.ViewState>
              </ui:LogMessage>
            </If.Else>
          </If>
          <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="1094.4,92.8" sap2010:WorkflowViewState.IdRef="LogMessage_3" Level="Info" Message="[&quot;Done processing tenant &quot; + clientTenantId + &quot; folder &quot; + clientFolderId]">
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsPinned">False</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
          </ui:LogMessage>
        </Sequence>
      </If.Then>
      <If.Else>
        <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="333.6,92.8" sap2010:WorkflowViewState.IdRef="LogMessage_11" Level="Info" Message="[&quot;Tenant not found in managed DB list.&quot;]">
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsPinned">False</x:Boolean>
              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
        </ui:LogMessage>
      </If.Else>
    </If>
  </Sequence>
</Activity>